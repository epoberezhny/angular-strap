{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","modal/modal.js","typeahead/typeahead.js","timepicker/timepicker.js","tab/tab.js","popover/popover.js","select/select.js","scrollspy/scrollspy.js","navbar/navbar.js","button/button.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","collapse/collapse.js","dropdown/dropdown.js","datepicker/datepicker.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","target","provider","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","stopEventPropagation","unbindAutoCloseEvents","$body","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","equals","$onMouseDown","clientTop","active","offsetTop","clientBottom","highWatermark","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","isUndefined","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","charAt","toUpperCase","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","parsedTime","isValid","isMinValid","$setValidity","setFullYear","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","customClass","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","$viewChangeListeners","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","toggleClass","bind","toggleEvent","hasClass","v","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","DateParserFactory","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","substr","today","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","modalElement","findFocusableElements","focusable","focusableElements","findNextFocusableElement","inReverse","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","defaultPrevented","bindBackdropEvents","which","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","$registerTarget","action","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","documentEl","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YA6zFA,SEtvFFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GFg0FI,QEvtFJE,GAAAC,EAAAA,GFwtFM,MEvtFNC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IF0tFI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GGh5FxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAA,OH4zFIC,KEtvFJC,QAAAT,SAAAP,GACAiB,EAAAA,UAAAjB,UAAAiB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACAnB,EAAAoB,YAAAA,EAAAA,SACApB,EAAAqB,SAAAA,GAEA,IAAAC,GAAAA,EAAAtB,YAKAuB,EAAAC,EAAAJ,UAAAK,GACAR,EAAAS,EAAAD,WACAL,EAAAO,EAAAA,aFmvFUP,EElvFVpB,EAAAoB,YACAA,EAAAQ,EAAAD,WFmvFUE,EAAoB7B,EAAQ6B,mBAAqBN,QAAQO,SACzDR,EAAmBtB,EAAQsB,gBEruFrC,IAVAC,QAAAQ,QAAAX,EAAAC,SAAAA,EAAAA,GAEAd,QAAAmB,SAAAD,GACAL,EAAAY,GAAAA,EAAAC,IAAA1B,GAEAa,EAAAY,GAAAA,EAAA1B,OAAAP,KFkvFMwB,QAAQQ,OAAOX,EAASC,GE7uF9BrB,EACAoB,EAAAY,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EFgvFQ,KAAM,IAAIC,OAAM,6CAFhBjB,GE7uFRkB,UAAAhC,EAAAP,GFgwFM,MEzvFNC,GAAAuC,gBAEAnB,EAAAY,UAAAE,EAAAC,KAAAf,EAAAY,UAAA1B,EAAAN,EAAAuC,iBAAAA,KACApC,SAAAqC,GACA,GAAAJ,GAAAb,QAAAnB,QAAAoC,EAAA,GAKA,OAJAF,GAAAG,oBAAAL,EAAA,IAAAM,WAAAN,WACAM,KAAAA,EAAA,IAGA1C,EAAAD,GAAAA,aFwuFUC,EAAQuC,kBEluFlBnB,EAAAe,UAAAf,EAAAjB,KAAAiB,EAAAC,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAd,GAAAsB,QAAAA,QAAAR,EAAAW,IACAhC,EAAAsC,EAAA,sBAAAF,EAAA,IAAAM,WAAA,WAAAC,KAAAH,EAAA,GFouFU,OEnuFVjC,GAAAA,aAAAqC,EAAAC,OAAAC,SFmuFiBV,EAAW,GAAGW,aE5tF/Bb,EAAAC,IAAAf,GAAAjB,KAAA,SAAAkB,GFguFQ,GE/tFRA,GAAAA,EAAAA,EAAAA,UACAjB,GAAAA,OACA4C,EAAAzC,EAAA0C,QAAAA,cAAAA,kBFiuFQ,IE7tFR7C,GAAAa,QAAAb,QAAA,SAAAuC,KAAApC,EAAA2C,QAAAC,WF8tFYC,EE7tFZC,EAAAA,EF8tFQ,QACEhC,OE7tFVE,EF8tFUnB,QAASA,EACT4C,KE5tFV,SAAAzB,GF8tFY,GADAF,EE3tFZjB,OAAA6C,EACA7C,EAAAkD,CAEA,GAAAnC,GAAAA,EAAAF,EAAAI,GAAA,EACA4B,IF2tFgB1B,QAAQQ,OAAOsB,EAAWE,SAAUlC,EEvtFpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GF0tFctD,GAAQuD,KAAK,0BAA2BH,GACxCpD,EAAQkD,WAAWK,KAAK,0BAA2BH,GAC/CrC,IACF8B,EAAM9B,GAAgBqC,GAG1B,MAAOJ,GAAOQ,MAAM,KAAMF,eAQlC,IAAIlD,MAz4FNqD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEvC,QCIFwC,OAAA,0BAAA,sBAAA,sCAAAC,SAAA,WAAA,WDHI,GCIJC,GAAAlD,KAAAH,UACAb,UAAAA,UACAQ,YAAA,GACA2D,YAAAA,UACAC,YAAA,UACAC,WAAA,EACAzB,QAAA,EACA0B,UAAA,MACAC,YAAA,2BACAC,SAAA,GACAC,eAAA,EACAC,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,GDHMN,KCINO,GDHMN,MCINO,EDHMN,WAAW,EACXC,WAAW,ECMjB3D,yBAAA,EAEA6D,0BAAA,EACAC,UACAC,SAAAvD,OAEAwD,QAAAC,GDJIjE,MCUJkE,MAAAC,UAAAC,aAAAC,cAAApE,KAAAhB,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDNM,QCWNqF,GAAAb,EAAAa,GD6IQ,QC2ERC,KACAC,EAAAA,MAAAA,EAAAC,YAAA,QAAAL,GACA5D,QAAAvB,UAAAwE,EAAAxE,SAAAyF,QAAAC,WAAA1F,EAAA2F,SACA3F,EAAAmF,OAAAA,GDlCQ,QC+FRS,KAQAT,GDtGUlC,EAAM4C,MAAM7F,EAAQwF,YAAc,QAASL,GCkGrDW,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,SDhGY9F,EAAQ+F,OAAOZ,GCoG3BA,IAAAa,EAAAC,CACA,GAAAA,GAAA,UAAAjG,EAAAmE,QAAA8B,MAAAC,GAAAA,GAAAA,MACAJ,MDlBQ,QC0HR1F,KDzHU,GC0HV+F,GAAAC,EAAAjC,QAAAkB,MAAAlB,IDzHU5C,SC0HVnB,QAAAiG,EAAAC,SAAAnC,GDzH4B,UAAZA,GAAmC,gBAAZA,EACzB/D,EAAQiG,GAAGlC,EAASgB,EAASoB,QACR,WAAZpC,IACT/D,EAAQiG,GAAe,UAAZlC,EAAsB,aAAe,QAASgB,EAASqB,OC4HhFpG,EAAAqG,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACAzG,WAAAmG,GAAA,UAAAd,GACAjF,EAAA+F,GAAAA,EAAAO,aAAA,YAAAvB,EAAAwB,6BDtHQ,QC2HRvG,KDzHU,IC2HV,GADAA,GAAAwG,EAAAzC,QAAAkB,MAAA,KACAe,EAAAA,EAAAM,OAAAG,KAAA1C,CD1HY,GC2HZ/D,GAAAwG,EAAAN,ED1H4B,WAAZnC,GAAmC,gBAAZA,EACzB/D,EAAQwG,IAAIzC,EAASgB,EAASoB,QACT,WAAZpC,IACT/D,EAAQwG,IAAgB,UAAZzC,EAAsB,aAAe,QAASgB,EAASqB,OC6HjFpG,EAAA0G,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACA3C,WAAAnE,GAAA,UAAAmE,GACA4C,EAAAV,IAAAC,EAAAnB,aAAA6B,YAAAA,EAAAA,4BAMA,QAAAC,KACA,UAAAjH,EAAAmE,QACA4C,EAAAH,GAAAA,QAAAzB,EAAAA,UAEA/E,EAAAwG,GAAAA,QAAAzB,EAAAA,eAIA,QAAA+B,KACAC,UAAAnH,EAAAmH,QAGAC,EAAAR,IAAA,QAAAzB,EAAA6B,UD9HY5G,ECiIZ2G,IAAAA,QAAA5B,EAAAkC,eD7HQ,QCoIRF,KDnIUC,EAAS,WCsInBE,OAAAP,GACAG,EAAAA,GAAAA,QAAAA,GAEAK,EAAAX,GAAAA,QAAAzB,EAAAA,MACA+B,GAAA,GDpIa,GAAG,GCwIhB,QAAAG,KACAG,IDrIYT,EAAWH,IAAI,QAASS,GC0IpCE,EAAAE,IAAAA,QAAAC,EAAAA,MACAA,GAAA1H,GDtIQ,QC2IR2H,GAAAC,GACAJ,EAAAK,kBDzIQ,QCgJRC,GAAAA,GD/IUJ,EAAWA,GAAa1H,EAAQ+D,QAAU3D,CCmJpD,IAAAyH,GAAAE,EAAAA,GAEAF,EAAAA,SAAAtG,EAAAA,QAAAwG,EAAAJ,EAAAA,wBAAAK,IDhJU,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,ECiJ7B,QAAAG,EAAAF,QAAAG,EAAA3G,QAAAQ,UAAA8F,GAAAM,MAAAA,EAAAC,MAAAC,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAR,IAAAA,EAAAC,KAAAA,GAAAG,EAAAC,OAAAC,GAEAC,GDxIYA,OAAQE,EAASC,EAASC,gBAAgBC,WAAaF,EAASG,KAAKD,UAAYjB,EAASmB,KAAK,cAAgB,GC4I3HT,EAAAA,GACAL,MAAA1C,EAAApB,gBAAA6E,YAEAd,OAAA3C,EAAA0D,aACA,ID1IU,OC2IVX,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GDzIQ,QC2IRF,GAAAc,EAAAjB,EAAAA,EAAAA,GD1IU,GAAIK,GC4Id/C,EAAApB,EAAAoB,MAAA,ID1IU,QAAQA,EAAM,IC2IxB,IAAA,QACA+C,GACAH,IAAAe,EAAAf,IAAAe,EAAAhB,OAAAA,EAAAA,EAAAA,EACAE,KAAAc,EAAAd,KAAAc,EAAAjB,MAEA,MACA,KAAA,SACAK,GACAH,IAAAe,EAAAf,IAAAe,EAAAhB,OACAE,KAAAc,EAAAd,KAAAe,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAb,GACAH,IAAAe,EAAAf,IAAAiB,EAAAA,OAAAA,EAAAA,EAAAA,EACAhB,KAAAc,EAAAd,KAAAc,EAEA,MAGA,SACAZ,GDxIcH,IAAKe,EAASf,IAAMiB,EC4IlC7D,KAAA2D,EAAAd,KAAA7C,EAAA0C,MAAA,EAAAkB,EAAA,GDvIU,IC2IV5D,EAAA,GD1IY,MAAO+C,EAET,IC0IVF,QAAAE,EAAAA,IAAAY,WAAAA,EAAAd,GDzIY,OC0IZ7C,EAAA,IDzIa,IAAK,OC0IlB+C,EAAAF,KAAAc,EAAAd,IACA,MDvIa,KCyIb,QACAE,EAAA/C,KAAA2D,EAAAd,KAAAc,EAAAjB,MAAAkB,MAKAb,IAAAY,SAAAf,EAAAe,IAAAf,UAAAA,EAAAA,GDvIY,OCwIZ5C,EAAA,IDvIa,IAAK,MCwIlB+C,EAAAH,IAAAe,EAAAf,IAAAiB,EAAAF,EAAAhB,MACA,MDrIa,KAAK,SCyIlBI,EAAAA,IAAAA,EAAAA,IAUA,MAAAe,GDzIQ,QC6IRC,GAAAD,EAAAA,GAEAf,GAAAA,GAAAH,EAAAA,GACAG,EAAAF,EAAAE,YAIAD,EAAAkB,EAAAA,aACAC,EAAAC,SAAAC,EAAAA,IAAAA,EAAAA,cAAAA,IACAzC,EAAA0C,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GDhJcL,OCiJdnB,KAAAuB,EAAAvB,GDhJcmB,MCiJdlB,KAAAsB,EAAAtB,GDhJUE,ECiJVsB,IAAAtB,EAAAH,IAAA0B,EDhJUvB,EAAOF,KAAOE,EAAOF,KAAOiB,EAC5BhB,EAAWkB,UAAUO,EAAKrI,QAAQQ,QAChCuH,MCiJZlB,SAAAoB,GAGAP,EAAAA,KACAC,IAAAA,KAAAA,MAAAU,EAAAC,KAAAA,KAEA5F,KAAAA,KAAAA,MAAAuF,EAAAN,MAAAA,KACAd,MAAAH,OAOAG,GAAA0B,EAEA,IAAAC,GAAAH,EAAAI,YACA5B,EAAA2B,EAAA7B,YAKAC,IAJA,QDzJclE,GCyJdiF,IAAAlB,IACAI,EAAAH,IAAAA,EAAAA,IAAAA,EAAAA,IAGAE,8CAAAC,KAAAA,GAAAD,CAEA,GAAA4B,GAAAD,EAAA7F,EAAAmE,EAAAa,EAAAC,EAUA,IATAa,EAAAE,KACA7B,EAAA8B,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,ID1JU/B,EAAWkB,UAAUO,EAAKxB,GC+JpC,wBAAA0B,KAAA7F,GAAA+E,CACA,GAAAe,GAAAA,aAAAA,KAAAA,GAAA9B,EAAAgC,EAAA,EAAAF,EAAA7B,KAAAH,EAAAkB,EAAA,EAAAc,EAAA9B,IAAAD,EAAAkB,EAAAhB,EAAA+B,EAAA,cAAA,cD3JYE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QC4JRI,GAAA5C,EAAAtC,EAAAmF,EAAAA,GAEA,GAAAP,IACA9B,IAAAsC,EACArC,KAAAsC,ED3JU,KC6JVT,EAAA9B,UAAAoC,MAAAA,ED5JU,IAAII,GC6JdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAN,EAAAM,EAAApC,EAAAoC,UD5JU,IAAI,aAAaK,KAAKzG,GAAY,CAChC,GAAIsG,GC6JhBvB,EAAAf,IAAAwC,EAAAJ,EAAA/B,OACAqC,EAAA3B,EAAAd,IAAAuC,EAAAA,EAAAA,OAAAA,CACAG,GAAAA,EAAAH,IACAV,EAAAY,IAAAA,EAAAN,IAAAA,EACAnC,EAAAmC,EAAAM,IAAAA,EAAAA,SD5JcZ,EC6Jd9B,IAAA2C,EAAAP,IAAAA,EAAArC,OAAAwC,OD3JiB,CACL,GAAIG,GAAiB3B,EAASd,KAAOuC,EC+JjDG,EAAAb,EAAAA,KAAAA,EAAAA,CD7JgBY,GAAiBN,EAAmBnC,KCgKpD6B,EAAAI,KAAAA,EAAAU,KAAAC,EACAxI,EAAA+H,EAAAX,QAEAqB,EAAAtB,KAAAqB,EAAA5C,KAAAmC,EAAAQ,MAAAA,GAMAvF,MAAAA,GDjKQ,QCoKRtF,GAAAyE,EAAAoG,EAAAC,GDnKU,GCoKVxD,GAAAA,EAAAA,yBAAAA,EAAAA,GDnKUyD,GAAOtB,IAAIqB,EAAe,OAAS,MAAO,IAAM,EAAIf,EAAQc,GAAa,KAAKpB,IAAIqB,EAAe,MAAQ,OAAQ,IAEnH,QCqKR7D,KDpKU3B,aAAa0F,GACT7F,EAAS8F,UAA2B,OAAflE,ICuKnCmE,EAAAzG,WACAyG,IDpKgBlL,EAAQoE,UCwKxB2C,KDpKcmE,IACFA,EAASC,WCyKrBD,EAAA/F,MAMA4B,IAEA9D,EAAAmI,SD5KYrE,EAAa5B,EAASuC,SAAW,MA3gBrC,GCWR1H,MAAAqE,EAAAgB,EAAAgG,SAAA9J,QAAAQ,UAAAnB,EAAA0K,GAAA7F,EAAAJ,EAAAkG,SAAAnG,EAAApE,QAAAhB,GDRYiD,ECQZkC,EAAAqG,OAAAxL,EAAAiD,OAAAjD,EAAAiD,MAAAwI,QAAAC,EAAAD,ODPYrF,EAAWhG,EAAQ,GAAGgG,SAASuF,aCa3CxG,IAAAA,EAAAyG,OAAA5L,QAAAI,SAAAyL,EAAArH,OAAA,CAGA,GAAAxE,GAAAsE,EAAAE,MAAAa,MAAA,KAAAyG,IAAAC,WACA9I,GAAAqB,MAAA0H,EAAAC,OAAAjM,GDbYqE,KAAMgB,EAAM,GCiBxBpC,KAAAiJ,EAAAA,IACAjJ,EAAAkJ,GDdQhH,EAASyG,IAAM5L,EAAQoM,IAAMhM,EAAQyL,KAAK,OAAS,GAC/C7L,EAAQsE,QCiBpBrB,EAAAoJ,MAAAL,EAAAC,YAAAjM,EAAAsE,QDdQrB,ECgBRkC,YAAAM,SAAAA,GDfUxC,EAAMkJ,aAAa,WACjBhH,EAASmH,WAAWC,MAGxBtJ,ECgBRkC,MAAAd,WDfUpB,EAAMkJ,aAAa,WACjBhH,EAASM,UAGbxC,ECgBRkC,MAAAoB,WDfUtD,EAAMkJ,aAAa,WACjBhH,EAASd,UCsBrBpB,EAAAsC,QAAAA,WAGAtC,EAAAuJ,aAAAA,WACAzF,EAAAA,YAGA7B,EAAA/E,SAAA8C,EAAAU,UAAAA,CDpBQ,ICqBR6I,GACArH,EDpBYqH,ECuBZrH,EAGAsH,EACAzM,CDvBQkF,GCwBRb,KAAArE,SAAAwE,GDvBUgI,ECwBVxM,EDvBUmF,EAASuH,SAEXvH,EC+BRnF,KAAA2M,WACAF,EAAAA,OAAArM,QAAAA,SAAAA,EAAAA,SD9BYJ,EC+BZwE,OACAiI,KAAAA,EAAAzM,MD9BcyF,KC+BdzF,EAAAA,QAKA4M,SAAAA,EAAAA,UAGAH,EAAA1I,EACAA,QAAAxC,UAAAsL,EAAA7M,WDlCYyM,EAAezM,EAAQ2M,UCsCnC3M,EAAA2M,YACA1J,EAAAkJ,EAAAnM,EAAA2M,YDnCUC,IACI5M,ECqCd+D,SDpCY/D,ECqCZmF,OAAAd,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SDnCcrE,EAAQqE,MACVpB,EAAMkJ,aAAa,WACO,UAApBnM,EAAQmE,QCwC1BgB,EAAA2H,GAAAC,QAMAjH,EAAAA,UDtCQX,ECgDRI,QAAA,WACAkB,ID/CUX,IACA7C,EAAMkI,YAERhG,ECiDRI,MAAAA,WAKAJ,MDrDUG,cCiDVd,GDhDUe,EAAa,KCoDvBJ,EAAAd,OAAArE,EAAAwE,MAAAH,UAIA2G,EAAAzJ,WAAAyL,WACAC,OAAAjN,GAAAmF,EAAAA,QDnDanF,EAAQwE,MAAMH,OC+C3BrE,EAAA0E,QD7CQS,ECoDR+H,KAAAA,WACA,GAAAlN,EAAA2M,YAAAxH,EAAA8F,SAAA,CDnDUhI,ECoDVkK,MAAAV,EAAAA,YAAAA,eAAAA,GACAlL,QAAAkL,UAAAW,EAAAA,eAAA7L,QAAAmE,WAAA1F,EAAAiN,eDnDYjN,ECoDZkN,aAAA9M,EDlDU,ICoDV8M,GDnDcA,CACAlN,GCoDd2M,WACAQ,EAAAV,EDlDcS,ECmDdA,EAAA9M,GAAAA,UDnDsBmB,QAAQnB,QAAQqM,EAAa,GAAGW,WC0DtDjI,OAKA8C,EAAA,KAAAC,EAAA9H,GAAAiN,GAAAvH,IDtDUoF,ECsDVoC,EAAA9B,OAAAC,ODrDU1E,EAAa5B,EAASuC,SAAW8E,EAAYxJ,KAAKkI,EAAU,SAASqC,EAAetK,MCwD9F8D,EAAA/G,KAEAiI,IAAAjI,UAEAkI,KAAAlI,UAKA0J,MAAAwD,OACAA,QAAAA,QD5DYI,WC6DZ,WD3DctN,EAAQa,WAAWkG,EAAWyG,SAASxN,EAAQa,WC+D7DsE,EAAA8F,MAAAA,EAAAA,SAAAjL,EAAAH,YAAA,IAAAG,EAAAuE,MACAkJ,EAAAxK,aAAAA,EAAAA,SAAAA,EAAAA,aAGAkC,EAKA+H,EAAA3L,MAAAmM,GDlEYP,ECoEZQ,QAAA5G,GDlEU5B,EAAS8F,SAAWhI,EAAMgI,UAAW,ECqE/CwC,EAAAxK,GAEA2K,EAAAC,kBAEAtM,QAAAwF,QAAAA,OAAA0C,EDrEYqE,ECqEZR,MAAAvG,EAAAoG,EAAAD,EAAAa,GAGAD,EAAA9N,MAAAoE,EAAA+I,EAAAD,GAAA/M,KAAA4N,GDpEUN,ECsEVtI,GDrEUyI,EAAM,WCuEhB9G,GAAAA,EAAAA,KDrEcwG,WAAY,YCyE1BtN,EAAAyE,WACA0C,UAAAA,EAAAA,SDtEgBhC,EAAS4H,QC2EzBjG,OAGA9G,EAAA2F,WDxEYwB,MASJhC,EC2ERI,MAAAA,WDxEU,MAFAD,cC2EVG,GD1EUF,EAAa,MC4EvBvF,EAAAwE,OAAAiB,EAAAA,MAAAA,UAKAuF,EAAAhF,WAAAA,WACA,QAAAb,GAEAA,EAAAA,QAEAnF,EAAAuB,MAAAyL,ODpFmB7H,EAASM,OAQpB,IAAIuI,GCiFZA,CD/EQ7I,GCmFRa,KAAAe,SAAAA,GAEAA,EAAAA,WDnFU9D,ECsFV1B,MAAAA,EAAAmM,YAAA,eAAAvI,GACA2I,QAAAA,UAAA/G,EAAAA,eAAAnB,QAAAA,WAAAA,EAAAA,eDrFY5F,ECsFZiO,aAAA9I,GDpFU6I,EAAQE,EACRlI,EAAae,ECwFvBkE,OAAA9F,IACAsI,QAAAxK,QAAAA,OAAAA,EAGAjD,EAAAoE,MAAAA,EAAA2C,GDvFc+G,EAASK,MAAMpH,GAAY5G,KAAKyF,IAGpCT,EAAS8F,SAAWhI,EAAMgI,UAAW,EACrCwC,EAAWxK,GC4FrBjD,EAAA4F,UAAAA,OAAAA,GACA3C,IAEAjD,EAAA+F,WAAAZ,OAAAA,GD1FYmC,MAeJnC,ECgGRA,OAAAqB,SAAAA,GD/FcP,GACFA,EAAIC,iBCmGhBa,EAAAkE,SDhGY9F,EAASgJ,QCoGrBnO,EAAA0E,SD/FQS,ECmGRnF,MAAA6E,WDlGUkC,EAAW,GAAGgG,SAEhB5H,ECsGR4B,WAAA,SAAAwF,GAGAvM,EAAAiE,UAAAjE,GDtGQmF,ECwGRiJ,YAAAC,SAAA3D,GAEA1K,EAAAoO,SAAAvJ,GDvGQM,EAAS0I,gBAAkB,WC6GnC9G,GAAAA,EAAAA,CAIA,GAAAuH,GAAAA,EAAA7G,UACA8G,EAAAxH,eACAyH,EAAAzH,EAAAA,KAAA8B,EAGA1D,KAGAlB,EAAAmK,EAAAxL,QAAAyL,EAAA,KAAAzN,EAAAqD,WDjHU8C,ECmHV0H,SAAAA,EAAAhH,UDlHU,ICoHV6G,GAAAI,IACAzK,EAAAA,EAAAyK,KAAAA,eDnHcF,ECoHdzH,EAAA2H,KAAAA,eDlHU,IADAvJ,ECoHVlB,UAAAyK,EAAAA,UAAA9L,EAAA5C,EAAA6E,SAAAC,UAAA9E,EAAA6E,UDnHcuJ,EAAW,CCsHzB,GAAAM,GAAAA,EACAzK,EAAAA,EAAAkB,EAAAmF,UDpHgB,UCqHhBI,KAAAgE,IAAAA,EAAAJ,OAAA5E,EAAA6E,EAAAE,OACAxK,EAAAA,EAAArB,QAAA,SAAA,ODpHuB,MAAM8H,KAAKgE,IAAsBJ,EAAgBrG,IAAMuG,EAAYC,EAAiBxG,MCuH3GlB,EAAA4H,EAAAD,QAAAA,MAAAlB,WAIAoB,OAAAA,KAAAC,IAAA5K,EAAAqK,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAA3K,OAAAA,SDvHuB,QAAQyG,KAAKgE,IAAsBJ,EAAgB5E,MAAQ6E,EAAWE,EAAiB1G,QC0H9G5C,EAAA6B,EAAApE,QAAAqD,QAAAA,SAEAd,EAAAM,YAAAA,GAAAA,SAAAA,GDvHU,GAAImJ,GAAcC,EAAoB5K,EAAWqK,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAa3K,KAE9BkB,EC0HRc,SAAA,SAAAA,GACAiI,KAAA9N,EAAAA,OAAA8N,EAAAA,WACAjI,EAAA8I,ODzHY9I,EAAI8I,oBAGR5J,EC2HRnF,cAAA2E,SAAAA,GAAAuB,KAAAD,EAAAC,QDzHY9F,EAAQ,GAAG8N,OC0HvBjI,EAAAjG,oBDtHQmF,ECwHRA,yBAAA,SAAAc,GACA7F,EAAAuE,yBDvHYsB,EAAIC,iBAEFlG,EAAQ4E,0BACVqB,EAAI8I,kBC4HhB5I,EAAAA,SACA5E,EAAAC,GAAAA,ODxHYpB,EC0HZA,GAAAiG,QD5EQ,ICoIRa,IAAA,CDqEQ,OAAO/B,GAET,QAASsI,GAAWxK,GCqL1B+L,EAAAA,SAAA/L,EAAAgM,OAAAhM,EAAAgM,MAAA7D,SAAAnI,EAAAiM,UAGAC,QAAAA,GAAAC,EAAAhP,GACA6C,MAAA1B,SAAAnB,SAAAA,GAAAqI,GAAA4G,iBAAAD,ID7sBM,GCUNE,GAAAnK,6BAAAlC,KAAAjD,EAAAiD,UAAAwI,WAEAnF,EAAAF,eAAAA,GAAAuF,UAAAA,EACApE,EAAAvH,QAAAwE,QAAAjD,EAAAG,SD6gBM,OCsLN6N,ODpLKP,UCsLL/L,aAAAA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDrLI,OACEkM,SCqLN3N,MDpLMyB,OCqLN,EDpLMD,KAAM,SAAkBC,EAAO7C,EAASyL,EAAM2D,GCwLpD,GAAAC,GACAlO,GACA0B,MAAA1B,EDrLQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACtNL,QAAQyL,UAAUnB,EAAKjK,MAAO5B,EAAQ4B,GAAOiK,EAAKjK,KAExD,ICyLR6N,GAAA7N,eDxLQL,SCyLRA,SAAAyL,OAAAnB,aAAA,SAAAjK,GACA5B,QAAA4B,UAAAqB,EAAAyM,KAAAC,EAAAA,KAAAA,EAAAA,MDxLY3P,EAAQ4B,IAAO,KC8L3BL,QAAAA,SAAAyL,eAAA4C,SAAA,eAAA,UAAA,SAAAhO,GACA,GAAA6N,GAAAA,KAAAA,EAAA/E,OAAAkF,GAAAA,cAAAhO,EAAAiO,MAAA,EACA7P,SAAA+D,UAAA8H,EAAA8D,MD1LY3P,EC2LZ4B,GAAAqB,EAAAyM,MAAA7D,EAAA8D,MDxLQ,IAAIC,GAAaxP,EAAQyL,KAAK,cC+LtCtK,SAAAuO,UAAAA,KACA7M,EAAAyH,KAAAkF,GD7LY5P,EAAQ+D,QAAS,ECkM7B/D,EAAAuB,OAAAyL,GAGA/J,EAAA1B,eAAAwO,WD/LU9M,ECgMV2K,MAAA,ID9LQ/B,EAAKmE,SAAS,QAAS,SAASC,GAC9B,GAAI1O,QAAQyL,UAAUiD,KAAchN,EAAM6M,eAAe,SAAU,CACjE,GAAIC,GAAW9M,EAAMqB,KACrBrB,GAAMqB,MAAQ0H,EAAKC,YAAYgE,GCkM3CD,QAAAhD,UAAA+C,IACAE,EAAAA,WACAxK,GAAAA,EAAAA,uBD5LQoG,ECmMRmE,SAAAzO,WAAA0O,SAAAA,GACA1O,GAAAQ,EAAAkB,UDlMYsM,ECmMZ9J,SAGAoG,EAAAtK,WDlMU0B,ECmMV2K,OAAA/B,EAAAqE,UAAA,SAAAD,EAAAF,GACAxO,QAAAgO,SAAAA,GDlMchO,QAAQQ,OAAOkB,EAAOgN,GCqMpChN,EAAAqB,MAAA2L,EAIApE,QAAAsE,UAAAJ,IACA9M,EAAAmN,WACAb,GAAAhO,EAAAyL,sBDlMa,GAEDnB,ECqMZ0D,QDpMUtM,EAAMmN,OAAOvE,EAAKsE,OAAQ,SAASF,EAAUF,GACtCR,GAAYhO,QAAQyL,UAAUiD,KAC/B1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,wBCwMxExE,KAAA,EACA5I,EAAAmN,OAGAb,EAAAhO,UDpMYsK,ECwMZ0D,WDvMUtM,EAAMmN,OAAOvE,EAAKnH,UAAW,SAASuL,EAAUF,GACzCR,GAAYhO,QAAQyL,UAAUiD,KAC/B1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,0BC2MxExE,KAAA,EACA5I,EAAAmN,YAAAvL,GAEA0K,EAAAe,YAAAL,MAQAhN,EAAAsN,UACAtN,EAAAsM,OAAAA,EAAAA,SAAAzC,SAAAA,GACA9M,GAAAuB,QAAAyL,UAAAiD,IACAV,EAAAe,YAAAL,KD3MQV,EAAUpK,EAAS/E,EAASJ,GAC5BiD,EAAMsN,IAAI,WAAY,WI7pB9B9P,GAAA8O,EAAAzC,UAIAlM,EAAAG,KACAF,EAAA,YJgqBEU,QI3pBF4C,OAAA,4BAAA,yBAAA,wCAAAH,SAAA,aAAA,WJ4pBI,GI3pBJ2I,GAAA5L,KAAAH,UACAwD,UAAA,UACAzB,YAAA,YACA6B,YAAA,aACAgM,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EJ4pBMrM,MAAO,EIzpBbzD,UAAAkE,EAEAwL,OAAA,gBJ0pBMC,MIxpBNI,EJypBMH,YItpBN3Q,EJupBM4Q,WIrpBNE,GJspBMD,WIrpBNE,EJupBIhQ,MIppBJkC,MAAA+N,UAAAA,aAAA,WAAA,QAAA,WAAA,SAAAC,EAAAvF,EAAAvG,EAAAyI,EAAAxG,GJqpBM,QIppBNnE,GAAAiO,EAAAA,EAAAA,GJqpBQ,GIppBRjO,MJqpBYjD,EAAUuB,QAAQQ,UAAWnB,EAAU0K,EInpBnDrI,GAAA+N,EAAAA,EAAAA,EAEA/N,IAAAA,GAAAqI,EAAArI,MACAA,EAAAkJ,EAAAX,MJopBQvI,GInpBR6N,cAAAK,WJopBUlO,EAAMiO,YACNjO,EAAMmO,aAAepR,EAAQ2Q,WAAa,MAE5C1N,EIlpBRA,gBJmpBQA,EIlpBR6N,UAAAO,SAAAC,GJmpBUrO,EAAMkJ,aAAa,WACjB2E,EAAWK,SAASG,MAGxBrO,EAAMsO,QAAU,SAASD,EAAOrL,GI7oBxC6K,EAAAA,aAAA,WACA7N,EAAAiO,OAAAM,MJipBQvO,EAAMwO,WAAa,WI1oB3BhE,MAAAA,GAAAxK,cJ6oBQ6N,EAAWY,OAAS,SAASF,GIzoBrCV,EAAAA,SAAAK,EACAlO,EAAAmO,cAAAE,EAAAA,SJ2oBYrO,EAAMmO,aAAepR,EAAQ2Q,WAAa,MIvoBtDlD,EAAA6D,GACA1D,EAAAnM,EAAAwB,kBJ2oBQ6N,EIxoBR7P,SAAA0Q,SAAAA,GACA1O,EAAA+N,aAAAA,GJ0oBQF,EIvoBRjL,OAAA7F,SAAAwF,GACA,GAAAjE,OAAA,CJwoBU,GIvoBVvB,GAAA4R,EAAAA,SAAAN,GAAAR,KJwoBU7P,GAAW4Q,cAAcpQ,GACzBR,EAAW0Q,UInoBrBb,EAAAA,gBACAC,GAAAP,EAAAvP,UJqoBUgC,EIpoBV4C,MAAA5C,EAAAiO,YAAAxK,UAAAA,EAAAA,EAAAA,GJqoBcnF,QAAQyL,UAAUhN,EAAQ4R,WAAarQ,QAAQmE,WAAW1F,EAAQ4R,WIloBhF5R,EAAAiD,SAAAiO,EAAAxK,EAAAnF,KJsoBQuP,EIloBRQ,WAAAA,WACA,MAAAA,GAAArO,WAAAiO,EAGAI,EAAAA,SAAAA,QAAAA,QAAAA,SAAAA,EAAAA,aAAAA,EAAAA,WAAAA,QAAAA,EAAAA,YAFA/P,EAAAuQ,SAAA7O,QAKA6N,EAAAiB,UAAAA,SAAAtQ,GAEAwE,GAAAC,EACAD,KAAA8I,EAAAA,EAAAA,SAAAA,OAAAA,MJioBgBxN,QAAQuQ,OAAO7O,EAAMiO,SAASI,GAAO7P,MAAOA,KI7nB5D,MAAA6P,IJioBQR,EI/nBRkB,aAAAC,SAAAC,GJgoBUjM,EI/nBVC,iBJgoBUD,EI/nBV8I,mBJioBQ+B,EI7nBRqB,kBAAAC,SAAAA,EAAAJ,GJ8nBU,GI7nBVrF,MAAAhE,EAAA0J,EAAA/O,SAAAqJ,OAAAhE,CJ8nBY,GAAIsJ,GI7nBhBE,EAAAA,SAAAG,GAEA3F,EAAAhE,EAAAA,UJ6nBgBwJ,EAAeF,EAAOC,UAAYD,EAAOM,aACzCH,EAAgBzF,EAAUhE,UAC1B2J,EAAe3F,EAAUhE,UAAYgE,EAAU4F,YI1nB/DzB,IAAAsB,GAAAnM,EAAAA,EACA0G,EAAAhE,UAAA1C,KAAAuM,IAAAA,EAAA7F,EAAAhE,UAAAgE,EAAA4F,cAGAzB,EAAAW,IACAxL,EAAAC,UAAAA,KJ6nBQ4K,EIvnBRA,WAAA7N,SAAAmO,GJwnBe,aItnBfoB,KAAAA,EAAAA,YACAvP,EAAAmO,cAAAA,KAAAA,EAAAA,SAAAA,EAAAA,oBJunBYnL,EAAIC,iBIrnBhBjD,EAAAA,mBAEAmO,KAAAnO,EAAAmO,SAAAnO,EAAAiO,SAAAxK,OJunBYoK,EAAWO,OAAOpO,EAAMmO,cInnBpCqB,KAAAA,EAAAA,SAAA3B,EAAAA,aAAA7N,EACAA,EAAAiM,eJqnBqC,KAAhBjJ,EAAIuM,SAAkBvP,EAAMmO,aAAenO,EAAMiO,SAASxK,OAAS,EIhnBxFrC,EAAAA,eACAA,QAAAqO,YAAAzP,EAAAmO,gBACA/M,EAAAA,aAAAA,GJmnBUyM,EI/mBVA,kBAAAA,EAAApJ,SAAA,GAAAzE,EAAAmO,cJgnBUnO,EI/mBV6N,WJinBQ,IAAIzM,GI/mBZyM,EAAA1Q,IJgnBQ0Q,GAAWzM,KAAO,WAChBA,IACA+C,EI/mBV,WJgnBgB0J,EAAWpJ,WI7mB3BjC,EAAAqL,SAAArL,GAAAA,YAAAA,EAAAA,cACAqL,EAAA1M,UACA0M,GAAApJ,EAAAoJ,GAAAA,UAAApJ,EAAAiL,cJinBa,GAAG,GAER,II9mBR7B,GAAAA,EAAAK,IJynBQ,OAVAL,GAAWrL,KAAO,WI7mB1BA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,YAAAA,EAAAA,cJ+mBczF,EAAQoE,UI5mBtB0M,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAMArD,EAAAA,YAEAxK,EAAAmI,aAIAwH,KJwmBe9B,EIhmBf,QAAArD,GAAAoF,GACA5P,EAAA4P,SAAAtR,EAAAmE,OAAAmN,EAAA1S,MAAAiL,SAAAnI,EAAAiM,UJqmBM,MADA0D,GIlmBNE,SAAAlS,EJmmBagS,MAERnC,OIlmBL,iBAAAoC,UAAAE,SAAAnC,GJmmBI,MAAO,UAASiC,EAAOE,EAAYnC,GACjC,MIhmBN5B,IAAAzN,QAAAmE,WAAAmN,EAAA1S,MAEAS,EAAAkQ,KAAAA,SAAAlQ,GAEA,MAAAkS,GAAA,UAAAE,EAAAD,EAAAnC,KAGAkC,EAAAG,UAAAhQ,EAAA7C,EAAAyL,OJgmBOmD,UIxlBPhP,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJylBI,GAAIY,GIxlBRqC,EAAAA,QJylBI,QACEkM,SIxlBN3N,MJylBM0R,QIxlBN3R,UJylBMyB,KAAM,SAAkBC,EAAO7C,EAASyL,EAAM5K,GIrlBpDb,EAAAqP,IAAAA,SACAlO,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,eAAAA,SAAAA,GACA+N,QAAA3C,UAAApL,EAAAuR,MAAAC,EAAAA,GAAAxR,EAAAiO,KJslBQ,IIplBR7P,GAAAiD,eJqlBQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KI9kB/FL,QAAAkP,SAAAlP,eAAAvB,SAAAyQ,eAAAA,SAAA7P,YAAA6P,SAAAA,GACA,GAAAC,GAAA1Q,KAAA0Q,EAAAA,OAAA9P,GAAAA,cAAA8P,EAAAA,MAAAA,EACAE,SAAAA,UAAA5Q,EAAA4Q,MAEAyC,EAAAA,GAAAxH,EAAAwH,MAAAA,EAAAA,OAGAjT,EAAAwQ,KAAAyC,iBAAAjT,EAAAwQ,KAAAA,eAAAA,MJglBQ,IAAIH,GAASlP,QAAQyL,UAAUhN,EAAQyQ,QAAUzQ,EAAQyQ,OAAS7P,EAAS6P,OI9kBnFC,EAAA2C,EAAAA,OAAAzS,EAAA8P,MACA4C,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAA1C,EAAAA,SAGA9Q,KAEAqT,GAAAI,MAAAH,EAAAA,cACArQ,IAAAyQ,GAAAD,IAAAA,IJ4kBY/C,IIzkBZ8C,GAAAG,cAAAA,EJ0kBQ,IAAIL,GIzkBZ3B,EAAAA,GJ0kBY6B,EAAY1C,EAAW1Q,EAASa,EAAYjB,EAChD,IAAIA,EAAQ4T,aAAc,CACxB,GAAIH,GAAiBH,EAAcO,OAAO,GAAGjR,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MItkBlGD,GAAAmN,iBAAA0D,EAAA7D,SAAAF,EAAAA,GAEA9M,EAAA8Q,SAAA9D,EAAAA,GAAAA,KAAAA,SAAAA,GACAqD,EAAAU,OAAAA,GAIA/S,EAAAgT,cJukBQhR,EInkBRmN,OAAAuD,EAAAjN,QAAAgK,SAAAiD,EAAAA,GJokBU1Q,EInkBVuQ,YAAAG,EJokBUL,EIlkBV3B,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GJmkBY,MAAI3R,GAAQiU,aAAeN,EAAOjN,QAAUuJ,EAASvJ,OAAS,MAC5DzF,GAAW4Q,cAAc5Q,EAAWiT,WAAWC,UAAU,EAAGlT,EAAWiT,WAAWxN,OAAS,KI1jBzG0N,EAAAA,OAAA1D,IAAAiD,EAAAA,EAAA9D,MAAA,EAAAa,IACA8C,EAAAY,OAAAA,OJ8jBYnT,GAAW0Q,eAGf1Q,EAAWoT,YAAYC,KAAK,SAASC,GIzjB7C,GAAAH,GAAAd,EAAAc,aAAAG,EJ2jBU,OAAIH,GIvjBdzC,EAGApQ,QAAAnB,UAAAmU,IAAA,gBAAAA,GJwjBmBA,EIrjBnBC,KJyjBQvT,EIvjBRQ,QAAA+S,WACA,GAAAC,EAAArU,SAAAsU,EAAAA,YACA,MAAAtU,GAAAuU,IAAAC,GAEAxU,IAAAA,GAAAyU,EAAAA,UAAAJ,EAAAK,aJwjBcN,EAAWlD,OAAekC,EAAUhI,OAAO0F,SAASI,GAAOyD,MAAQ9T,EAAWiT,UIpjB5FjR,GAAA1B,QAAAkC,SAAA+Q,GAAAlB,EAAAc,aAAAI,GAAAA,CACA,IAAAhB,GAAAA,EAAAA,EAAA1G,WAAAA,QAAAA,iBAAAA,IAAAA,GACA9M,EAAAA,EAAA,GAAA0U,eACAlB,EAAAA,EAAA,GAAAoB,YJsjBUxU,GAAQuU,IAAI3U,EAAQ6Q,aAAc,EAAQpP,EAAQA,EAAMyB,QACxD9C,EAAQ,GAAGyU,kBAAkBJ,EAAIK,IAEnC7R,EAAMsN,IAAI,WAAY,WKh5B9B9P,GAAA+S,EAAA1G,UAIAlM,EAAAG,KACAF,EAAA,YLm5BEU,QK54BF4C,OAAA,6BAAA,oCAAA,uCAAA,2BAAAH,SAAA,cAAA,WL64BI,GK54BJ2I,GAAA5L,KAAAH,UACAwD,UAAA,UACAzB,YAAA,OACA6B,YAAA,aAEAwQ,UAAA,cACAC,YAAA,iCACAC,QAAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAC,EACA9O,SAAA,OACA+O,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAL,EAAAA,GACAM,UAAAN,EAAAA,GACAO,OAAAA,EL44BMN,SAAU,EKz4BhB1U,WAAA,EAEA4U,WAAArG,EACAsG,cAAA,EACAC,OAAAjV,iCL04BMkV,SKz4BNlV,mCL04BMmV,cAAe,QAEjBhV,MKv4BJkE,MAAA+Q,UAAA7Q,YAAA/E,aAAA2B,OAAAnB,iBAAA0K,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL64BM,QKt4BN2K,GAAAC,EAAAA,EAAAC,GAcA,QAAAC,GAAAA,GACAC,GAAAA,GAAAC,IAAAC,EAAAA,UACAC,OAAAA,IAAAF,MAAAA,KAAAC,MAAAA,EAAAA,UAAAE,GAAAA,GLknCQ,QKn1BRC,GAAArF,EAAAA,GLo1BU,GAAIsF,GKn1BdC,EAAAxW,CLo1BU,IKn1BVA,EAAA,GAAAyU,gBAAA+B,CLo1BY,GAAIF,GKn1BhBnV,EAAAmR,GAAAA,iBACAtS,GAAAyW,UAAAnC,GACAtU,EAAA0W,UAAAlC,YAAA+B,GLo1BYD,EAASK,QAAQ,YAAaJ,GAC9BD,EAASrF,aKj1BrB2F,GAAAA,GAAAA,kBACA5W,EAAA,GAAA2M,kBAAAA,EAAAA,GLm1BqBxL,QAAQmR,YAAYtS,EAAQ,GAAGsU,kBK90BpDuC,EAAAjB,GAAAA,eAAAtJ,EACAsJ,EAAAtJ,GAAAA,aAAAiK,GLk1BQ,QK/0BRvW,KLg1BUA,EK/0BV,GAAA2M,QLokBQ,GAAIiJ,GAAc7Q,EAAS/E,EAASmB,QAAQQ,UAAWnB,EAAU0K,IKp4BzEyF,EAAAmG,EAAAC,MAEAnX,EAAAgW,EAAAhW,SACAiD,EAAA+S,EAAAoB,OLq4BYC,EAAOrX,EAAQqX,KKh4B3BC,EAAAA,SAAAC,EAAApB,EAAAhB,GACA,MAAAqC,GAAAxX,WAAA4V,EAAAsB,EAAAA,EAAA/B,IAMAsC,EAAAC,EACAC,EAAArB,EAAAsB,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,MLk4BYtB,EAAYrV,EAAW4W,YAAcL,EK/3BjDrB,GAEAE,KAAAyB,EAAAC,WACAvB,SAAAwB,EAAAD,WAAAC,GACAC,OAAAC,EAAAH,aACAN,OAAAU,EAAAJ,aACAJ,YAAAS,EAAAL,mBAGA9U,EAAAoV,EAAAxC,kBAAAA,EAAAA,WAAAA,GACA5S,EAAAjD,EAAA8V,YAAAA,GAIA7S,EAAA8U,EAAAzG,cAAAA,GACA0E,EAAA3E,EAAAC,cAAAA,GL43BY6G,EAAgBJ,EAAeI,cAAchC,GK13BzDlT,EAAAqV,EAAA7W,YAAA6P,GACA0E,EAAAA,EAAAvU,OAAA6P,EL43BQrO,GAAMoV,QAAUrY,EAAQ6V,OK13BhC5S,EAAAsV,UAAAA,EAAAzC,SL43BQ7S,EK33BR+S,QAAAwC,SAAAA,EAAAjB,GL43BUvB,EAAY3E,OAAOkG,EAAMjG,IAE3BrO,EKv3BR1B,WAAAkX,SAAAlB,EAAAnO,GLw3BU4M,EKv3BVA,WAAAuB,EAAAA,ILy3BQtU,EKv3BRoT,gBAAAE,SAAAA,GLw3BUP,EKv3BVuB,eAAAmB,ILy3BQ1C,EKv3BR2B,OAAAJ,SAAAK,GLw3BcrW,QAAQkX,OAAOlB,KAAUnO,MAAMmO,EAAKoB,YKt3BlD3C,EAAA4C,MAAAA,ELw3BYrX,QKv3BZQ,OAAAiU,GACAA,KAAAA,EAAA4C,WLw3BcX,OAAQV,EAAKmB,aACbjB,OAAQF,EAAKG,aKr3B3B1B,YAAA3E,EAAAuG,oBAGA3W,EAAA4W,ULs3BsB7B,EAAY6C,UKn3BlC7C,EAAAyC,ULu3BQzC,EKl3BR/U,OAAA0Q,SAAAA,EAAAA,EAAAA,GACA3R,EAAAqV,aAAAyD,MAAA7X,EAAA4W,WAAAc,aACAvR,EAAAyQ,WAAA,UAAA7X,EAAAwX,YAAA,GAAAuB,MAAA,GAAAA,MAAA,KAAA,EAAA,ILo3BexX,QAAQkX,OAAOlB,KAAOA,EAAO,GAAIwB,MAAKxB,IAC7B,IAAVjG,EAAarQ,EAAW4W,WAAWmB,SAASzB,EAAKhB,YAAgC,IAAVjF,EAAarQ,EAAW4W,WAAWoB,WAAW1B,EAAKmB,cAAkC,IAAVpH,GAAarQ,EAAW4W,WAAWqB,WAAW3B,EAAKG,cACzMzW,EAAW4Q,cAActQ,QAAQ4X,KAAKlY,EAAW4W,aKh3B3D7B,EAAAwC,UACAxY,EAAAiB,YAAA4W,GACAzQ,EAAA,WLk3Bc4O,EAAYvQ,MAAK,MAIvBuQ,EKj3BR/U,eAAA0Q,SAAAA,GLk3BU,GAAK1Q,EAAW4W,aAAczO,MAAMnI,EAAW4W,WAAWc,WAA1D,CK12BV,GAAAS,IAAAA,GAAAA,EAAA7P,YAAAvJ,UACAiB,GAAAoY,WAAAA,SAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IACApY,EAAAoV,cAAAA,QAAAA,KAAAA,EAAAA,aACApV,EAAA0Q,YL+2BQqE,EK72BR1B,OAAAA,WL82BU,GK72BViD,GAGA+B,EAFAvE,EAAAmB,EAAAA,SAAA4B,SAAAA,EAAAA,OAAAA,EAAAA,IACAtD,IL+2BU,KAAK3N,EAAI,EAAGA,EAAI7G,EAAQ0G,OAAQG,IAC9BwP,EAAO,GAAI0C,MAAK,KAAM,EAAG,EAAG3C,EAASC,MAAQ+C,EAAWvS,GAAK7G,EAAQyV,UK52BjF4D,EAAAE,MACAtB,KAAAA,EACAlD,MAAAmB,EAAAlW,EAAA0G,GACAuR,SAAAjC,EAAAwD,OAAApD,EAAA6B,YAAAmB,EAAAvS,GACA0S,SAAAjF,EAAAA,YAAAA,EAAAA,ILg3BU,IK52BVgF,GADA9E,IL+2BU,KAAK3N,EAAI,EAAGA,EAAI7G,EAAQ0G,OAAQG,IAC9BoR,EAAS,GAAIc,MAAK,KAAM,EAAG,EAAG,EAAG3C,EAAS6B,QAAUmB,EAAWvS,GAAK7G,EAAQ0V,YK52BxF6D,EAAAE,MACAhC,KAAAA,EACA1C,MAAAmB,EAAAlW,EAAA0G,GACA+Q,SAAAzB,EAAAwD,OAAAxD,EAAAyB,YAAA2B,EAAAA,GACAK,SAAAnF,EAAAA,YAAAA,EAAAA,ILg3BU,IK52BVgF,GADA9E,IL+2BU,KAAK3N,EAAI,EAAGA,EAAI7G,EAAQ0G,OAAQG,IAC9B4Q,EAAS,GAAIsB,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG3C,EAASqB,QAAU2B,EAAWvS,GAAK7G,EAAQ2V,YK32B3F8D,EAAAC,MACAnC,KAAAE,EACA1C,MAAAqD,EAAAX,EAAAU,GACAuB,SAAApF,EAAAiF,OAAA1S,EAAAA,YAAAA,EAAAA,GL62BcyS,SK52BdtD,EAAA2D,YAAAlC,EAAA,IL+2BU,IAAIiC,KK32BdzW,KAAAA,EAAAyW,EAAAA,EAAAA,EAAAA,OAAAA,IACAtB,EACAnV,EAAA2W,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEA3W,EAAA+U,MAAAA,EAAAA,GAAAA,EAAAA,IAIAhC,GAAAA,KAAA6D,EACA5W,EAAA+S,YAAAwD,EL42BUvW,EK12BV2W,OAAArD,EL22BUtT,EAAM6W,MK12BhBxI,EAAAkI,OAAAH,EAAAD,GAAA7B,MAAAhB,WAAA,GL22BUtT,EK12BV+U,cAAAU,EL22BU1C,EK12BV1E,UAAA,GL42BQ0E,EAAY6D,YAAc,SAAStC,EAAMjG,GACvC,QAAK0E,EAAYwD,QAAwC,IAAVlI,EKx2BzD0E,EAAA2D,aAAA3D,EAAA1E,MAAAA,WACAyI,IAAAA,EACAzI,EAAAoH,eAAA1C,EAAAwD,MAAAd,aACAnB,IAAAwC,EACAxC,EAAAjG,eAAA0E,EAAAwD,MAAA9B,aADAqC,SL62BQ/D,EKz2BR+D,YAAApB,SAAAA,EAAAvC,GL02BU,GAAI2D,EKh2Bd,OARAzE,KAAAtV,EACA+Z,EAAAA,EAAAA,UAAAA,IAAAzE,EAAA2C,OAAA1C,IAAAwE,EAAA/Z,OACA,IAAAsR,EACAyI,EAAAA,EAAAA,UAAAA,KAAAzE,EAAAe,KAAAd,IAAAwE,EAAA/Z,OL02B+B,IAAVsR,IACTyI,EAAexC,EAAKoB,UAA4B,KAAhBvC,EAASC,KAAgC,IAAlBD,EAAS6B,QKt2B5EjY,EAAA+V,SAAAA,EAAAR,QACAS,EAAA1E,EAAA0I,EAAAvY,SAAA6P,EAAAA,EAAAA,EAAAA,QAEA0E,EAAA1E,EAAAgH,EAAAhH,SAAAA,EAAAA,EAAAA,EAAAA,SAIA0E,EAAAA,aAAAgE,SAAAvY,EAAA6P,GACA0E,WAAAiE,EAAAA,cACAjE,EAAAiE,eAAA1D,EAAAA,GAEAP,EAAAiE,WAAAvC,EAAAA,IL02BQ1B,EKv2BRgE,eAAA,SAAAvY,EAAA6P,GLw2BU,GKv2BV2I,GAAAhB,GAAAA,MAAAM,EAAAhQ,OAAAvJ,GLw2BcqZ,EKv2Bd/H,EAAAA,WACA2I,EAAAf,EAAAO,aLw2BcA,EAAUQ,EAAQvC,YKt2BhCrG,KAAA2E,ELw2BYiE,EAAQjB,SAASK,EAAQ9P,SAASvJ,EAAQyV,SAAU,IAAMhU,GKr2BtE6W,IAAAA,EACA2B,EAAAC,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAA5I,GACA4I,EAAAA,WAAAnB,EAAAxP,SAAA6M,EAAAC,WAAArW,IAAAA,GLw2BUgW,EKt2BVkE,OAAAA,EAAA3D,GAAAA,ILw2BQP,EKt2BRsC,WAAA,SAAA7W,EAAA6P,GLu2BU,GKt2BV4I,EACAnY,KAAAR,GLu2BY2Y,EKt2BZA,GAAAA,MAAAxB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QLu2BYnX,QAAQQ,OAAOqU,GACbC,KKt2Bd6D,EAAA3D,cAEAH,IAAArU,GLu2BYmY,EKt2BZA,GAAAA,MAAAxC,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QLu2BYnW,QAAQQ,OAAOqU,GACb6B,OAAQiC,EAAWxB,gBAEF,IAAVpH,IKp2BrB0E,EAAAjE,GAAAA,MAAAA,KAAA,EAAA,EAAA9L,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEA1E,QAAAwC,OAAAqC,GACA2I,OAAAA,EAAAA,gBLu2BUiH,EKn2BVmE,ULq2BQnE,EAAYjE,aAAe,SAAS9L,GAGlC,GKr2BV,UAAAkU,EAAAA,OAAAC,SAAAA,eAAAnU,EAAAC,iBLo2BUD,EAAI8I,kBACAzI,EAAS,CKj2BvB0P,GAAAA,GAAArD,QAAAvS,QAAA6F,EAAAA,OACAA,YAAAkU,EAAA,GAAA/T,SAAAsE,gBACAxE,EAAAA,EAAAA,UAIAiU,EAAA3H,eAAA,WLm2BQwD,EAAYrD,WAAa,SAAS1M,GK71B1C,GAAAgU,mBAAAjE,KAAAA,EAAAA,WAAAwD,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFAvT,EAAAoT,iBACApT,EAAAoU,kBACAJ,KAAAV,EAAAA,QAEA,WADAvD,GAAAsE,MAAAA,EAGA,IAAAC,GAAAA,GAAAxB,MAAA/C,EAAAwD,OACAgB,EAAAA,EAAAjE,WACAkE,EAAArC,EAAAA,EAAAwB,GAAAlT,OAGA8T,EAAAA,EAAA9B,aACA4B,EAAA9H,EAAA8E,EAAAA,GAAAA,OL61BcmC,EAAUQ,EAAQvC,aKx1BhCgD,EAAAxE,EAAAmE,EAAAA,GAAAA,OACAM,EAAA,EACA1U,EAAAuM,UAAAmI,KAAA1U,EAAAuM,SACAvM,EAAAuM,EAAAmI,EAAAnI,EAAA,EAAAoH,CACAgB,KACAtD,KAAAuD,EAAAA,QAAAvD,EAAAc,EAAAd,EAAAA,EAAAA,EAAAA,EAAAc,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL21BU,IKz1BV6B,IAAAZ,EAAAA,GAEAgB,EAAAA,CACA,MAAAK,EAAAA,UAAAL,MACA/C,KLw1BcrR,EKx1BduM,UAAA8E,EAAA,ELy1BU,IKx1BV2C,GAAAU,IAAA1B,GAAA1P,EAEA+Q,EAAAL,IAAAK,IAAApC,GAAAxR,IAAAA,GAAAA,CACA2T,KAAAK,GLw1BYT,EKv1BZjB,SAAA4B,EAAAD,EAAApR,SAAAvJ,EAAAyV,SAAA,KACAwE,EAAAf,EAAAO,EAAAkB,GAAA3a,OAEA8a,GAAA5E,EAAAA,IACAmE,IAAAK,GLu1BYT,EKt1BZhB,WAAA4B,EAAAF,EAAApR,SAAAvJ,EAAA0V,WAAA,KACA4E,EAAAE,EAAAxE,EAAAwC,GAAAA,OACAkC,GAAAL,EAAAE,EAAAA,ILu1BqBK,GKr1BrB5E,EAAAA,WAAAiE,EAAA3C,EAAAA,SAAAtX,EAAA2V,WAAA,KACAoF,EAAAL,EAAAT,EAAAS,GAAAhU,OACAqK,GAAA7B,EAAAA,EAAAA,EAAAA,EAAAA,ILu1BqB2L,IKl1BrBE,GAAAA,EAAArU,iBACAgU,GAAAhU,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,ILq1BUsP,EKn1BVU,OAAAtW,EAAA4a,GAAAA,GLo1BUD,EKn1BVlE,EAAA,GAAA6D,EAAA,ILo1BU3J,EKn1BV+F,WLu2BQ,IK/0BR1W,GAAAyI,EAAA6D,ILg1BQsJ,GK/0BRnK,KAAA,WLg1BU,MK/0BVzL,IAAAJ,EAAAgX,WLg1BY5W,EAAQyI,KAAK,OAAQ,YK90BjCoO,GAAAA,IAAAA,qBAAAA,eAGAgE,IACAjF,EAAAlJ,KAAAA,OAAA,QACA1M,EAAAkP,KAAAA,WAAA0F,QACA5U,EAAAwG,GAAAA,QAAAoQ,QAEAiE,MAGA,IAAAC,GAAAlF,EAAA3R,OACA2R,GAAA3R,QAAA,WACAiL,GAAAlP,EAAAyL,WACAqP,EAAAA,IAAAA,QAAAA,GL+0BUD,IAEF,IAAIC,GK30BZ9a,EAAAA,IL40BQ4V,GAAY3R,KAAO,YK10B3BiC,GAAAlG,EAAAyL,KAAA,aAAAzL,EAAAyL,KAAA,cL40BUqP,IKz0BV9T,EAAA+T,WACAnF,EAAAtO,UAAAwG,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACA8H,EAAAA,UACAA,GAAAtO,EAAAA,GAAAsO,UAAAtO,EAAApB,aAEA,GAAAlG,IL40BQ,IK10BR+a,GAAAjN,EAAAA,IAkBAoB,OLyzBQ0G,GAAYvQ,KAAO,SAASyI,GKx0BpC8H,EAAAA,WL00BcA,EAAYtO,UAAUsO,EAAYtO,SAASd,IAAIN,EAAU,aAAe,YAAa0P,EAAYjE,cKt0B/GkE,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOAjH,EAAAd,KAGAoB,ELsgBM,GKv4BNA,GAAAyB,6BAAA9N,KAAAA,EAAAA,UAAAA,WACAqD,EAAAtG,eAAAqL,GAAAA,UAAAA,CAoYA6H,OAnYAtS,GAAAoV,OAEApV,EAAAyW,KAAArX,EAAAqX,oBAgYAlI,EAAAvO,SAAAA,EACAsS,MLk0BKlE,UK9zBLhP,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL+zBI,GAAIY,GK9zBRqC,EAAAA,SL+zBQqM,EAAW,6BAA6B5E,KAAKuG,EAAQmK,UAAUC,UACnE,QACElM,SK9zBN5N,ML+zBM2R,QAAS,UACTlQ,KK5zBNyM,SAAAA,EAAArP,EAAAyL,EAAA5K,GLi3BQ,QK5yBRqa,GAAA/F,GL6yBU,GAAKhU,QAAQkX,OAAO8C,GAApB,CK3yBV,GAAAC,EAAAA,SAAAC,EAAAH,QACAra,GAAAA,GAAAya,MAAA1b,EAAAwb,UAAAA,GAAAA,MAAAA,EAAAA,WAAAA,YAAAA,KAAAA,EAAAA,IAAAA,EAAAA,QACAva,EAAAya,MAAA1b,EAAAyb,UAAAA,GAAAA,MAAAA,EAAAA,WAAAA,YAAAA,KAAAA,EAAAA,IAAAA,EAAAA,YAGA,IAAAD,GAAApS,MAAApJ,EAAAsV,UAAA,GAAAyD,MAAAwC,EAAA5C,WAAAgD,YAAA,KAAA,EAAA,IAAA3b,EAAAsV,QACAgG,EAAAlS,MAAApJ,EAAAuV,UAAA,GAAAwD,MAAAwC,EAAA5C,WAAAgD,YAAA,KAAA,EAAA,IAAA3b,EAAAuV,OAEAtU,IAAAA,GAAA4W,GAAA0D,CL4yBUta,GAAWya,aAAa,OAAQF,GKxyB1Cva,EAAA2a,aAAAC,MAAAJ,GAEAxa,EAAAsW,aAAAA,MAAAA,GAEAuE,IL0yBU7a,EAAW4W,WAAa0D,IA+C1B,QAASQ,KACP,OAAQ9a,EAAW4W,YAAczO,MAAMnI,EAAW4W,WAAWc,WAAa,GAAKzC,EAAWjV,EAAW4W,WAAY7X,EAAQkV,YKh7BnI3T,GAAAA,IACA0B,MAAA1B,EL8zBQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,cAAe,eAAiB,SAASI,GAC9YL,QAAQyL,UAAUnB,EAAKjK,MAAO5B,EAAQ4B,GAAOiK,EAAKjK,KAExD,IK1zBR6N,GAAA7N,eL2zBQL,SK1zBRA,SAAAyL,OAAAnB,YAAA,YAAA,YAAA,gBAAA,SAAAjK,GACA5B,QAAA4B,UAAAqB,EAAAyM,KAAAC,EAAAA,KAAAA,EAAAA,ML2zBY3P,EAAQ4B,IAAO,KKrzB3BL,QAAAya,SAAAhG,eAAA5V,SAAAa,eAAAjB,UAAAA,SAAAA,GACAA,GAAAA,GAAAgc,KAAA3Q,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EAEAgM,SAAArX,UAAAqX,EAAAA,MACAnB,EAAAA,GAAAjT,EAAAyM,MAAA6H,EAAApB,OAKAtK,IAAA7L,EAAAgV,WAAApU,EAAAoU,aAAAhV,EAAAkV,WAAA,QLszBQ,IKrzBRjS,GAAA4I,EAAAzL,EAAA6P,EAAAF,ELszBQ/P,GKrzBRgc,EAAAA,QLszBQ,IKrzBR3E,GAAA9V,EAAAG,KACAwU,EAAAjG,SAAAsH,EAAApB,EAAAhB,GLszBU,MKrzBV6G,GAAA3X,WAAAA,EAAAA,EAAAA,EAAAA,GLuzBYwH,GKrzBZmQ,QLszBU/Y,EAAMmN,OAAOvE,EAAKsE,OAAQ,SAASF,EAAUF,GACtCiM,GAAeza,QAAQyL,UAAUiD,KAClC1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,2BKlzBxE4L,KAAAC,EACA/F,EAAAnW,OLqzBcgc,EAAWvW,SAIjB,IAAIwW,GKhzBZ5Q,GLizBU8K,OKhzBVnW,EAAAgc,WLizBU3E,KKhzBV8E,GLkzBQ5a,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQyL,UAAUnB,EAAKjK,KK7yBrCqB,EAAAmN,SAAA0D,EAAAA,SAAA7D,GAEA+L,EAAAtK,SAAAzQ,GAAA4W,EAAAA,oBAAAA,EAAAA,GACAzO,MAAA4S,EAAA3Q,SAAAzJ,KAAAoa,EAAApD,SAEAuD,EAAAA,EAAAZ,gBLgzBQtY,EK5yBRmN,OAAAkL,EAAAA,QAAAtb,SAAAuV,EAAAA,GL6yBUyG,EK5yBVtK,OAAAzQ,EAAA4W,cL6yBW,GAmBH5W,EKpyBRsa,SAAAA,QAAAA,SAAAA,GLqyBU,GKpyBVta,ELqyBU,KKlyBV6a,EAEAK,MLiyBYlb,GAAWya,aAAa,QAAQ,GKjyB5CS,ILoyBU,IKjyBV5E,GAAA0E,QAAAG,OAAAA,GAAAb,EAAAvb,EAAAmV,MAAA2G,EAAA7a,EAAA4W,WLkyBU,QKjyBV0D,GAAArF,MAAAqB,EAAAnC,YLkyBYnU,EAAWya,aAAa,QAAQ,GKhyB5CO,ILmyBUE,EKjyBVxD,GACA1D,WLiyBcjV,EKjyBdA,UACAuX,EAAAA,EAAAoB,qBAAA4C,EAAAvb,EAAAmV,UAAA,GACAe,EAAAjB,EAAAA,EAAAG,iBAAApV,EAAAkV,cLmyBUqC,EAAO0E,EAAWG,qBAAqBnb,EAAW4W,WAAY7X,EAAQmV,UAAU,GKhyB1FoC,WAAAvX,EAAA+Y,SLkyBmBxB,EAAKoB,UK9xBxB,SAAAtE,EAAAA,SAEAkD,EAAAA,UAAAA,IACAhD,QAAAhT,EAAAmR,SACA2J,EAAAA,cAEA9E,GAAAhD,MAAAA,OLgyBQtT,EK9xBRgb,YAAAK,KAAA/H,SAAAA,GL+xBU,GAAIgD,EAaJ,OAXEA,GK/xBZA,QAAA7E,YAAA6B,IAAA,OAAAA,EACA8H,IACA9a,QAAAgT,OAAAA,GL+xBmBA,EK3xBnB0H,WAAApE,EAAAA,SACAkE,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBL6xB0C,SAArB/b,EAAQiV,SKzxB7BtD,GAAAA,MAAA,IAAAA,GL4xBmB,GAAIoH,MAAKxE,GKtxB5BtT,EAAAA,WAAA4W,EAAAzO,qBAAAyO,EAAAc,EAAAA,ULyxBiBoD,MAET9a,EKtxBR+a,QAAAA,WACAhc,EAAAA,IAAA+b,ML2xBQ9Y,EAAMsN,IAAI,WAAY,WMn3C9B9P,GAAAub,EAAAlP,UAIAlM,EAAAG,KACAF,EAAA,YNs3CEU,QMj3CFgb,OAAAA,yBAAAA,SAAAA,OAAAA,WAEA,GAAAC,GAAAA,KAAAA,UACA3b,UAAA0b,UNi3CMhc,SAAU,mBM92ChBkc,SAAAxb,WACAyb,YAAA3b,UAIAQ,KACAib,EAAAxP,SAAA2P,EAAA/a,GN82CW2a,EAAU3a,KAAM2a,EAAU3a,GAAOgb,IMz2C5CpR,EAAAqR,KAAAA,WAAAxR,SAAAqR,EAAAA,EAAAA,GAEAI,GAAAA,GAAAC,IAKAD,GAAAE,SAAAA,QAAAA,KAAAA,GAEAF,QAAAG,SAAA,YAAAC,WAAAA,eAAAA,SAAAA,GACA3b,QAAAmR,UAAAA,EAAAqK,MAAAI,EAAAA,SAAAvb,GAAA+a,EAAA/a,MNu2CM4J,EAAO4R,UAAYN,EAAKzR,SAASoR,SACjCjR,EMr2CNuR,aAAAG,EAAAA,SAAAA,YNs2CMJ,EAAKC,OAASvR,EAAOuR,UMn2C3BD,EAAAO,2BAAAH,EAAAA,wBNq2CMJ,EMp2CNG,MAAA3L,SAAAyL,GACA9K,QAAAA,YAAA8K,EAAAI,OAAAA,UACA3R,EAAA8R,WAAAA,EAAAA,MAAAA,GNs2CQR,EMp2CRQ,OAAAA,KAAAR,INs2CMA,EAAKO,QMp2CXpL,SAAAA,GNq2CQ,GAEIqL,GAFAhM,EMp2CZwL,EAAAC,OAAAQ,QAAAL,GACAI,EAAAA,EAAAR,OAAAC,OAMAO,GAFAR,QAAAU,SAAAlM,GAEAgM,EAAAA,OAAAxR,IAAA,SAAAoR,GAGAI,MAAAA,GAAAA,ONg2CaC,QM/1CbjM,GNi2CwBwL,EAAKC,OAAOI,QAE5BL,EM71CRA,OAAAW,OAAAX,EAAAC,GN81CYzL,EM71CZgM,EACAR,IN81CmBxL,IAAUgM,GAAeA,IAAgBR,EAAKC,OAAOrW,QAC9D4W,IM11CVR,GAAAK,GAAA1b,EAAAA,EAAAA,OAAAA,OACAqb,EAAAE,WAAAA,EAAAA,OAAAA,GAAAU,MAAAC,GN81CUb,EAAKW,cAGTX,EM31CNW,WAAAV,EAAAI,WAAAS,SAAAd,GN41CQA,EAAKC,OAAOI,QAAU1b,EMz1C9Bqb,EAAAe,2BAAAA,QAAA,SAAAC,GACAH,ON61CMb,EAAKiB,UAAYvS,EAAOuS,UAAY,SAASH,EAAOI,GAClD,MAAOlB,GAAKC,OAAOI,UAAYS,EAAMF,MAAQZ,EAAKC,OAAOI,UAAYa,GMv1C7ElB,EAAAmB,YAAAA,EAAAA,YAAAA,SAAAA,EAAAA,GACArd,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UACAqd,EAAAhd,WAAAA,IN61CIF,MAAKkE,KAAO,WMr1ChB+J,GAAAA,KAOA/L,OALAgb,GAAArd,SAAAqd,EAEAA,EAAAhd,WAAAA,EACAiS,EAAAA,cAAAsJ,EACA0B,EAAAA,SAAA3B,EACA0B,KNs1CKjP,UMp1CLjP,UAAA,UAAA8L,WAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GNq1CI,GMp1CJjL,GAAAiL,EAAAtL,QNq1CI,QMn1CJyC,SAAA,WAAAiQ,UNq1CMiL,YMn1CNC,ENo1CMlb,OMn1CNmb,ENo1CMnd,YMh1CNod,SAAA,WAAAA,SAAAve,EAAAA,YNi1CMC,YMh1CNue,SAAAA,EAAAD,GNi1CQ,MAAOxS,GAAKtL,UAAYK,EAASL,UAEnCyC,KM30CNob,SAAApB,EAAAA,EAAAA,EAAAuB,GN40CQ,GM30CRJ,GAAAtM,EAAAuM,GN40CYA,EAAaG,EAAY,EAa7B,IMr1CRlK,KAAA8J,EAAAA,QAAA7J,EAAA+J,SAAA9J,GN00CU0J,EMx0CVG,cAAAX,EAAAlJ,OAAAA,GN00CY4J,IACFC,EAAWpB,2BAA2B1I,KAAK,WMr0CrDkK,EAAAC,cAAAL,EAAArB,OAAAI,WAMAiB,EAAApB,YAAAA,KAAAA,SAAA1I,GNo0CY,MMn0CZoK,GAAAA,WAAAC,GNm0CmBpK,KAGPiK,EMh0CZC,aAAA,CNi0CU,GAAIC,GAAqBE,EAAOJ,EAAMC,aACtCL,GAAWpB,2BAA2B1I,KAAK,WACzCoK,EAAmBC,OAAO1b,EAAOmb,EAAWrB,OAAOI,WM1zC/Dla,EAAAmN,OAAAoO,EAAAC,aAAA,SAAAxO,EAAAF,GACAmD,EAAAuK,WAAAxN,KACA,SNg0COjB,UMtzCPgB,UAAA,UAAA,WAAAD,OAAAA,SAAAA,EAAAA,EAAAA,GNuzCI,OACEmD,SAAW,YAAa,WACxBjQ,OMpzCNA,ENqzCMD,KMlzCNob,SAAA/S,EAAAxK,EAAA2d,EAAAD,GAwBAM,QAAAA,KN4yCU,GAAIvN,GAAQ8M,EAAWrB,OAAOQ,QAAQta,EACtC6K,GAASsQ,EAAWL,UAAU9a,EAAOqO,GAAS,WAAa,eAAelR,EAASge,EAAW/S,SAASqR,aAlBzG,GMlzCRtc,GAAAoN,EAAA4Q,ENmzCQhe,GAAQoN,SAAS,YMhzCzBgR,EAAAxO,SAAA,QAAA,SAAAC,EAAAA,GACAhN,EAAAqW,MAAAA,EAAArW,YAAAgN,KAIAmO,EAAAA,KAAAnB,EAAAha,KAGAA,EAAAoI,SAAAxK,WACAud,EAAAA,SAAAf,EAAApa,SAAAA,WAGAub,EAAAxO,SAAA6O,WAAAA,SAAAA,EAAAA,GACA5b,EAAAqO,SAAA8M,EAAArB,MAAAA,KN8yCQqB,EAAWnB,MAAMha,GM1yCzBmb,EAAAA,IAAAA,WAAApB,WACA6B,EAAAA,QAAAA,KChNAtd,EAAAyb,2BAAA1I,KAAA,WAIA1T,MAEAke,SPkgDEvd,QO3/CFxB,OAAAA,0BAAA,2BAAAiE,SAAA,WAAA,WP4/CI,GO3/CJzB,GAAAA,KAAA3B,UACAuD,UAAA,UACAC,YAAA,GACAzB,WAAA,EACA2B,QAAA,EACAya,UAAA,QACAva,YAAA,2BACAC,iBAAA,EP4/CMN,QAAS,QOz/CfpD,UAAAkE,EAEAtC,MAAA,EP0/CM2B,MOv/CNtE,GPw/CM+e,QOt/CNC,GPu/CMxa,MOp/CNxE,EPq/CMyE,WOp/CNua,EPs/CIje,MOn/CJkE,MAAA+Z,WAAAA,SAAAA,GPo/CM,QAASC,GAAe7e,EAASkL,GOh/CvC,GAAAtL,GAAAif,QAAAA,UAAAA,EAAAA,GPk/CYD,EAAW7Z,EAAS/E,EAASJ,EOv+CzCmP,OALAH,GAAA+P,UAEAG,EAAAA,OAAAA,QAAAjO,EAAAiO,SAGA/P,EAEAnM,MAAAic,OP6+CKjQ,UOz+CLhP,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GP0+CI,GAAIkf,GO1+CRjc,EAAAA,uBAAAA,EAAAA,UP2+CI,QACEkM,SO3+CN3N,MP4+CMyB,OO3+CN,EP4+CMD,KAAM,SAAkBC,EAAO7C,EAASyL,GOx+C9C,GAAA4D,GACAlO,GACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,cAAAA,YAAAA,KAAAA,cAAAA,cAAAA,aAAAA,SAAAA,GACA+N,QAAA3C,UAAApL,EAAAuR,MAAAC,EAAAA,GAAAxR,EAAAiO,KPy+CQ,IOv+CR7P,GAAAiD,ePw+CQ1B,SAAQC,SAAU,OAAQ,YAAa,aAAe,SAASI,GACzDL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KOn+C/FL,QAAAA,SAAAyL,eAAA4C,SAAA,eAAA,UAAA,SAAAhO,GACA,GAAA6N,GAAAA,KAAAA,EAAA/E,OAAAkF,GAAAA,cAAAhO,EAAAiO,MAAA,EACA7P,SAAA+D,UAAA8H,EAAA8D,MPs+CY3P,EOr+CZ4B,GAAAqB,EAAAyM,MAAA7D,EAAA8D,MPw+CQ,IAAIC,GAAaxP,EAAQyL,KAAK,cOl+CtCtK,SAAAC,UAAAoO,KACA/D,EAAAnB,KAAAkF,GACA/D,EAAAmE,QAAApO,EPq+CY5B,EOn+CZuB,OAAAyL,GPs+CQzL,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3CiK,EAAKjK,IACPiK,EAAKmE,SAASpO,EAAK,SAASqO,EAAUF,GACpC9M,EAAMrB,GAAOoK,EAAKC,YAAYgE,GAC1B1O,QAAQyL,UAAU+C,IOh+CpClE,EAAA,WACAuE,GAAA+O,EAAAtR,wBAMAhC,EAAAtK,WPk+CU0B,EOj+CVic,OAAAA,EAAAA,UAAA,SAAAjP,EAAAF,GACAxO,QAAA6d,SAAAA,GPk+Cc7d,QAAQQ,OAAOkB,EAAOgN,GO/9CpChN,EAAA8b,QAAA9O,EAIApE,QAAAsE,UAAAJ,IACA9M,EAAA,WACAmc,GAAA7d,EAAAyL,sBPk+Ca,GAEDnB,EO/9CZuT,QPg+CUnc,EAAMmN,OAAOvE,EAAKsE,OAAQ,SAASF,EAAUF,GACtCqP,GAAY7d,QAAQyL,UAAUiD,KAC/B1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,wBO59CxExE,KAAA,EACA5I,EAAAmN,OAEAgP,EAAA7d,UPi+CYsK,EO79CZuT,WP89CUnc,EAAMmN,OAAOvE,EAAKnH,UAAW,SAASuL,GAC/BmP,GAAY7d,QAAQyL,UAAUiD,KAC/B1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,0BO19CxExE,KAAA,EACA5I,EAAAmN,YAAAvL,GAEAua,EAAA9O,YAAAL,MAQAhN,EAAAsN,UACAtN,EAAAmc,OAAAA,EAAAA,SAAAtS,SAAAA,GACA9M,GAAAuB,QAAAyL,UAAAiD,IACAmP,EAAA9O,YAAAL,KP09CQmP,EAAUJ,EAAS5e,EAASJ,GAC5BiD,EAAMsN,IAAI,WAAY,WQ1nD9B9P,GAAA2e,EAAAtS,UAIAlM,EAAAG,KACAF,EAAA,YR6nDEU,QQxnDF4C,OAAA,yBAAA,yBAAA,wCAAAH,SAAA,UAAA,WRynDI,GQxnDJ2I,GAAA5L,KAAAH,UACAwD,UAAA,UACAzB,YAAA,SACA6B,YAAA,UACA6a,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EACAvZ,UAAA,oCRynDMkZ,YAAa,gCQtnDnB1e,QAAAkE,MAGA0a,SAAArQ,OACAsQ,UAAAtZ,EAEAuZ,cAAAE,WRqnDMD,cQnnDNvO,yBRonDMhL,QQjnDNvG,ERmnDIe,MQhnDJkE,MAAAhC,UAAAuI,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GRmnDM,QQ/mDNvI,GAAAmO,EAAAA,EAAAA,GRgnDQ,GAAIG,MQ9mDZtO,EAAAmO,QAAAA,UAAAxQ,EAAA0K,ERgnDQiG,GAAUpM,EAAS/E,EAASJ,EQ9mDpCiD,IAAAA,GAAA+c,EAAAhgB,MACAiD,GAAAgd,YACAhd,EAAAid,SACAjd,EAAAkd,gBAGAld,EAAAmd,gBRgnDQnd,EQ9mDRsO,YAAAJ,EAAAG,SR+mDQrO,EAAMgd,oBAAsBjgB,EAAQsf,gBAAkBtf,EAAQqf,SAC9Dpc,EAAMid,eAAiBlgB,EAAQ8f,cQ5mDvC7c,EAAAsO,SAAAvR,EAAAsR,QR8mDQrO,EQ7mDRA,UAAAkJ,EAAAwT;AR8mDQ1c,EQ7mDRsO,UAAAF,SAAAC,GR8mDUrO,EAAMkJ,aAAa,WACjBoF,EAAQJ,SAASG,MAGrBrO,EAAMsO,QAAU,SAASD,EAAOrL,GQ1mDxChD,EAAA8a,aAAA,WACAxM,EAAAA,OAAAwM,MR8mDQ9a,EQ1mDRwO,WAAA5K,WR2mDU,MQ1mDV5D,GAAA8a,cR4mDQ9a,EAAM8a,UAAY,SAASzM,GACzB,MAAOC,GAAQwM,UAAUzM,IQvmDnCrO,EAAAod,WAAAA,WACA,IAAA,GAAAxZ,GAAA,EAAAA,EAAA5D,EAAAiO,SAAAxK,OAAAG,IACA5D,EAAA8a,UAAAlX,IACA5D,EAAAsO,QAAA1K,IAOA0K,EAAAA,YAAA,WACAtO,IAAAA,GAAAiO,GAAAA,EAAAA,EAAAM,EAAAA,SAAAA,OAAAA,IACAD,EAAA+O,UAAAA,IRumDcrd,EAAMsO,QAAQ1K,IAIpB0K,EQrmDRtO,OAAAmO,SAAAoM,GRsmDUva,EAAMiO,SQrmDhBM,ERsmDUD,EQrmDVtO,sBRumDQsO,EQrmDRvR,SAAAuf,SAAAnO,GAUAnO,MAVAjD,GAAAugB,URumDgBhP,EAAQwM,UAAUzM,GACpBrO,EQvmDdmO,aAAAoM,OAAAva,EAAAmO,aAAAmM,QAAAjM,GAAA,GRymDcrO,EAAMmO,aAAakD,KAAKhD,GAEtBtR,EAAQuf,MAAMtc,EAAMmO,aAAamO,KAAK,SAASgB,EAAGC,GQrmDlEjP,MAAAF,GAAAmP,KRymDYvd,EAAMmO,aAAeE,EQtmDjCmP,EAAArP,cR0mDQG,EQxmDRvR,OAAAqf,SAAA/N,GRymDU,KQxmDVrQ,QAAAA,YAAA4Q,IAAA5O,EAAAmO,GAAAA,GAAAnO,EAAAqO,SAAAA,QRwmDU,CAGA,GAAI7P,GAAQwB,EAAMiO,SAASI,GAAO7P,KAClCwB,GQxmDVwd,OAAAxd,WRymDYsO,EAAQJ,SAASG,GACbtR,EQxmDhBqf,SACApe,EAAAjB,cAAAiD,EAAAmO,aAAAtF,IAAA,SAAAwF,GACArQ,MAAAA,SAAA4Q,YAAAA,EAAApQ,SAAAR,IACA,KR0mDuBgC,EAAMiO,SAASI,GAAO7P,UAG3BzB,EAAQuG,OQrmD1BV,EAAA7F,cAAAwF,IAAAvE,EAAAqQ,YAAAC,EAAAA,GAEAvR,EAAA4R,cAAAN,GRwmDcC,EAAQ9L,UAGZxC,EQnmDV1B,MAAAA,EAAAmf,YAAA3M,UAAAA,EAAAzC,EAAAC,GACAtO,QAAAmO,UAAAA,EAAAnQ,WAAA8S,QAAAjI,WAAArK,EAAAA,WRomDYzB,EQnmDZ4R,SAAAL,EAAAoP,EAAAlf,KRsmDQ8P,EQnmDRtO,mBAAAmO,WRomDcpR,EAAQqf,SACN9d,QQnmDhBmf,QAAAzf,EAAA8S,aACA9Q,EAAA1B,aAAAN,EAAA8S,YAAAA,IAAA9Q,SAAAiO,GACAjO,MAAAmO,GAAAA,UAAAG,KRsmDctO,EAAMmO,gBQ/lDpBK,QAAAA,UAAAxQ,EAAA8S,cAAA9Q,EAAAiO,SAAAxK,OACAzD,EAAAjD,aAAAwQ,EAAAvP,UAAAA,EAAA8S,aRomDc9Q,EAAMmO,iBAIZG,EQhmDRvR,WAAAqf,WRimDU,MQhmDVrf,GAAAiD,WAAAmO,ERmmDiBnO,EAAMiO,SAASxK,QAAUzF,EAAWiT,WAAWxN,QAAU1G,EAAQwQ,UAF/DvN,EAAMiO,SAASxK,QAI1B6K,EQ/lDRD,UAAAA,SAAAA,GACA,MAAAtR,GAAAsR,SACA/P,EAAAuQ,aAAAZ,QAAAI,QAEAA,EAAAA,eAAAA,GAGAC,EAAAQ,UAAAA,SAAAtQ,GAEAwE,GAAAC,EACAD,KAAA8I,EAAAA,EAAAA,SAAAA,OAAAA,MAEAzI,QAAAwL,OAAA7O,EAAAiO,SAAAI,GAAA7P,MAAAA,KR8lDU,MQ5lDVmf,IR8lDQrP,EQ3lDRQ,aAAA8O,SAAA1G,GR8lDU,GAFAlU,EQ3lDVC,iBR4lDUD,EAAI8I,kBACAzI,EQ3lDdsa,CR4lDY,GQ1lDZC,GR0lDgB1G,EAAW5Y,QAAQnB,QAAQ6F,EAAIlC,OAEnC,IAA4B,MAAxBkC,EAAIlC,OAAOqC,SQxlD3B,IRylDc,GAAIya,GAAkB1G,EAAShN,UQzlD7CyT,GAAAC,EAAAna,OAAA,GACA0T,MAAA7Y,EAAAqf,GAAAxG,WR2lDkBwG,EQ1lDlBC,GR4lDgBA,EAAkBA,EAAgB1T,QQtlDlDwF,GACApR,QAAAnB,QAAAsK,GAAAzE,eAAA,SAGAA,EAAAC,eAAAA,WR4lDQqL,EQtlDRoB,WAAAlN,SAAAA,GRulDU,GAAK,eAAeiF,KAAKzE,EAAIuM,SAK7B,MQxlDV6M,KAAApZ,EAAAjG,UACAiG,EAAAC,iBRqlDYD,EAAI8I,mBQhlDhB/O,EAAAwS,UAAApB,IAAAnL,EAAAhD,QAIAiM,EAAAA,ORilDelP,EAAQqf,UAA6B,KAAhBpZ,EAAIuM,SAAkC,IAAhBvM,EAAIuM,aQ3kD9DxS,EAAAud,WR+kDgC,KAAhBtX,EAAIuM,SAAkBvP,EAAMmO,aAAe,EAAGnO,EAAMmO,eAAyC,KAAhBnL,EAAIuM,SAAkBvP,EAAMmO,aAAe,EAAGnO,EAAMmO,aAAenO,EAAMiO,SAASxK,OAAS,EAA4B,KAAhBT,EAAIuM,SAAkBvP,EAAMmO,aAAenO,EAAMiO,SAASxK,OAAS,EAAGzD,EAAMmO,eAAyB7P,QAAQmR,YAAYzP,EAAMmO,gBAAenO,EAAMmO,aAAe,GQ5kDvWG,EAAAuP,YALAC,EAAA1P,OAAApO,EAAAmO,eRqlDQG,EQ7kDRyP,MAAAA,WR8kDU,GQ7kDVjd,GAAAA,EAAAgJ,UAAAA,SR8kDU,OAAOkU,GAAG1D,QAAQ,SAAW,GAAK0D,EAAG1D,QAAQ,YAAc,GAAK0D,EAAG1D,QAAQ,SAAW,GQxkDhGhM,EAAA2J,iBAAA7W,SAAAA,GACA,OAAAkN,EAAA,GAAA2P,cAAAC,UACAjG,EAAAA,iBACA4C,EAAA9d,2BACAuR,EAAAA,OAAA7J,SR6kDQ,IQxkDR6J,GAAA7J,EAAAA,IRykDQ6J,GQxkDRvR,KAAAA,WRykDUkb,IACIlb,EAAQqf,UACV9N,EQxkDZ7J,SAAA8F,SAAA,mBAGApG,EAAA+T,WACA5J,EAAA9L,SAAAY,GAAAC,EAAA,aAAA,YAAAiL,EAAAQ,cACA/R,EAAAqf,UACApc,EAAAmO,GAAAA,UAAAG,EAAAoB,aAEApB,GAAAA,GRykDQ,IQvkDRnR,GAAAwG,EAAAnB,IAoBA,ORojDQ8L,GAAQ9L,KAAO,YQtkDvB0V,EAAAkE,UAAA9d,QAAAmR,YAAAzR,EAAA8S,eRwkDY9Q,EAAMmO,iBAERG,EAAQ7J,SAASd,IAAIN,EAAU,aAAe,YAAaiL,EAAQQ,cQnkD7EgO,EAAAnf,UACAR,EAAA2f,IAAAA,UAAAA,EAAAA,YAMA/Q,GAAA,IAIAuC,ERi3CM,GQ/mDNtO,GAAAiO,6BAAAA,KAAAA,EAAAA,UAAAA,WACA5K,EAAA+Y,eAAApO,GAAAxI,UAAA6G,CAgQAtM,OADAkQ,GAAAtS,SAAAA,EACAmf,MRgkDK/Q,UQ7jDL/L,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GR8jDI,GAAIrC,GQ9jDR6e,EAAA7e,QR+jDI,QACEuO,SQ/jDN3N,MRgkDM0R,QQ/jDN3R,URgkDMyB,KAAM,SAAkBC,EAAO7C,EAASyL,EAAM5K,GQ5jDpD,GAAAwO,IACAlO,MAAAC,EACAie,YAAAzS,EAAAnB,YR+jDQtK,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,cAAe,UAAY,SAASI,GACtVL,QAAQyL,UAAUnB,EAAKjK,MAAO5B,EAAQ4B,GAAOiK,EAAKjK,KAExD,IQ3jDR6N,GAAA7N,eR4jDQL,SQ3jDRA,SAAAyL,OAAAnB,YAAA,iBAAA,QAAA,SAAAjK,GACA5B,QAAA4B,UAAAqB,EAAAyM,KAAAC,EAAAA,KAAAA,EAAAA,MR4jDY3P,EAAQ4B,IAAO,KQrjD3BL,QAAAA,SAAAyL,eAAAoU,SAAA,eAAA,SAAA,YAAA,SAAAxf,GACA,GAAA6N,GAAAA,KAAAA,EAAA/E,OAAA0W,GAAAA,cAAAxf,EAAAiO,MAAA,EACA7P,SAAAqf,UAAAxT,EAAA8D,MRyjDY3P,EQxjDZ4B,GAAAqB,EAAAyM,MAAA7D,EAAA8D,MR2jDQ,IAAIyR,GAAehhB,EAAQyL,KAAK,gBQ1iDxC,IAXAzL,QAAA4M,UAAA5G,KACAib,EAAAjhB,KAAAA,GACAihB,EAAA5X,UAAA,EAEA4X,EAAAnU,SAAA9M,GAOAJ,WAAAqR,EAAAA,GAAAE,SAAAnR,cAAAJ,CAEA,GAAAqR,GAAA0P,CACA3gB,GAAAqJ,IAAA6X,UAAAA,QRkjDUlhB,EAAUmB,QAAQnB,QAAQ,gFQ9iDpCihB,EAAA5N,MAAAA,GRijDQ,GQ9iDRH,GAAAU,EAAA/S,EAAAA,WAEAoQ,EAAAK,EAAAiC,EAAAA,EAAAA,EACA1S,GAAAA,SR8iDUb,EAAQ,GAAGkhB,iBAAiB,OAAQjQ,EAAOyP,iBQziDrD7f,IAAAA,GAAAsgB,EAAAjN,OAAA,GAAA1R,QAAA,OAAA,IAAAM,MR4iDQD,GQ1iDRhC,OAAA0Q,EAAAA,SAAAA,EAAAA,GR2iDU2B,EAAcU,SAAS/Q,EAAOhC,GAAYd,KAAK,SAASwT,GQviDlE1S,EAAA0Q,OAAAA,GAEA1Q,EAAAuT,cAEAnD,GRwiDQpQ,EQviDRjB,qBAAAuB,KAAAmf,WRwiDUzf,EQviDVuT,YRyiDQvT,EQviDR0Q,QAAAL,WRwiDU,GAAIkD,GQtiDdlD,CRwiDUD,GQviDVmD,qBRwiDcxU,EQviDdqf,UAAA9d,QAAAmf,QAAAzf,EAAA8S,cRwiDYS,EQviDZA,EAAAgN,YAAA1V,IAAA,SAAArK,GRyiDc,MADA6P,GAAQD,EAAOsP,UAAUlf,GQtiDvC6P,QAAAD,EAAA7F,OAAA0F,SAAAI,GAAAyD,QACAzD,OAAAD,QAAAsP,WRyiDcnM,EQxiDdA,EAAAlD,QAAAtR,EAAAqR,WAAAH,EAAAI,WRwiDyBkD,EAAS9N,OAAS,KAAO1G,EAAQ6f,eAAiBjf,EAASif,eAE3DrL,EAASgN,KAAK,QQniDvClQ,EAAA7P,EAAAA,UAAAiF,EAAAqN,aRuiDYS,EAAWlD,QAAeD,EAAO7F,OAAO0F,SAASI,GAAOyD,OQliDpE9R,EAAAN,MAAA6R,GAAAxU,EAAAyf,cAAAzf,EAAAwf,WAAA5e,EAAA4e,aAEAxf,EAAAqf,WACAhO,EAAAoQ,SAAA,SAAAhgB,GRqiDY,OAAQA,GAA0B,IAAjBA,EAAMiF,SAG3BzD,EAAMsN,IAAI,WAAY,WS57D9B9P,GAAA4Q,EAAAvE,UAKA4U,EAAA3gB,KAEAH,EAAAG,YT67DEQ,QSv7DF0D,OAAAA,4BAAA,kCAAA,sCAAA0c,SAAAjW,aAAAvD,WTw7DI,GSt7DJuZ,GAAAE,KAAArgB,WACAX,EAAAW,KAAAA,UACAsgB,SAAAC,IAIAC,SAAA3b,ITo7DMgC,OSn7DN,ITq7DIrH,MSl7DJkE,MAAA+c,UAAAA,YAAA1W,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GTs7DM,QSh7DN2W,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAA9hB,EAAA,GAAAJ,SAAAoM,gBAAAA,EAAAA,cTk7DM,QS96DNsV,GAAAU,GT+6DQ,GS96DRpiB,GAAA0hB,QAAAS,UAAAA,EAAAA,ET+6DaniB,GAAQI,UAASJ,EAAQI,QAAU0hB,ES56DhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOA7hB,EAGA8hB,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKAna,EAAAA,EAAAA,oBAEA0Z,IA+JArf,OTgxDQqf,GSn6DRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAA7W,KAAAA,cAAA1L,EAAA6hB,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAAphB,KAAAgiB,4BTk6DUnB,ESj6DVO,GAAAA,SAAAE,GTk6DUJ,EAAS5b,GAAG,SAAUyc,GACtBH,EAAwBd,EAAS9gB,KAAKiiB,aAAchjB,EAAQ6hB,US95DtEQ,EAAA3W,EAAA6E,IAAA,qBAAAoS,GAGA5hB,EAAAqhB,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IT85DYT,EAAMS,GAAYE,IAGtBA,ES35DRzb,QAAA,WACA0b,KAAAA,UACAC,KAAAA,QAAAA,IT85DUN,EAASrb,IAAI,QAAS7F,KAAKgiB,4BAC3BnB,EAAShb,IAAI,SAAUic,GSz5DjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGA3Z,IAGAia,SAGAja,GAAAA,KTq5DQ0Z,ESh5DRxb,cAAA4b,WTi5DU,GSh5DVA,EAAA/P,OTg5DU,CAGA,GAFA/J,GSh5DV+Z,EAAAD,EAAAA,YAAAR,EAAApZ,KAAA,eAAA,ETi5DU+Z,ESh5DVja,KAAA8Z,IAAAA,EAAA5b,YAAAqc,EAAAra,KAAA,iBACAF,EAAA8Z,EAAA9Z,GAAAA,WAAA8Z,IAAAA,EAAA,GAAA1e,OACA,MAAAse,GAAAc,iBAAAV,EAAA5b,GTk5DU,KAAK,GAAIA,GAAI4b,EAAe/b,OAAQG,KS74D9Cwb,IAAAA,QAAAU,YAAAA,EAAAlc,GAAAqL,YAAA,OAAAuQ,EAAA5b,GAAAqL,WAGAkR,IAAAH,EAAApc,GAAA9C,UT64DgB4E,EAAY8Z,EAAe5b,GAAGqL,WSx4D9CmQ,EAAAc,EAAAA,IAAAxa,EAAAvI,EAAAA,EAAAA,GAAAA,WACA,MAAAsiB,GAAAS,iBAAAV,EAAA5b,MT44DQwb,ESz4DRnB,2BAAA,WT04DUkC,WSz4DVhd,EAAA8a,cAAAmC,IT24DQhB,EAAWc,iBAAmB,SAAS/iB,GACrC,GAAIsiB,EAAc,CAChB,GAAIxB,GAAgBmB,EAAWiB,mBAAmBZ,ESx4D9DA,KACAtiB,EAAAoN,OAAAmB,YAAA,UACAvI,EAAAhG,EAAAijB,OAAAjd,OAAAhG,EAAAijB,EAAAlW,OAAAA,SAAAA,SAAA,OACA/M,EAAA+M,OAAAA,SAAAK,SAAAmB,YAAA,WAKA+T,EAAAF,EAAA/R,OTy4DUrQ,ESx4DVijB,OAAAtf,SAAAA,UACAqC,EAAAhG,EAAAijB,OAAA,OAAAjd,EAAAhG,EAAAijB,OAAAlW,SAAAA,SAAA,OTy4DY/M,EAAQijB,OAAOlW,SAASA,SAASK,SAAS,WAG9C6U,ESp4DRkB,mBAAA9a,SAAA+a,GTq4DU,MSp4DVC,GAAAvR,OAAAqR,SAAAA,GACA,MAAAvjB,GAAAA,SAAAyjB,ITq4Da,IAELpB,ESl4DRha,aAAA6J,WTm4DU3Q,QSj4DVC,QAAAghB,EAAAhC,SAAAA,GACA,GAAA+C,GAAArR,EAAAA,cAAAA,EAAAA,OTk4DYuR,GAAevR,UAAYqR,EAAgBpb,EAAWC,OAAOmb,GAAetb,IAAM,KS/3D9F4a,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAqB,EAAA3f,OAAAA,SAAAsf,GACAb,MAAAlO,QAAAkO,EAAAA,YAAAze,KAAAA,SAAAA,EAAAA,GAAAsf,MAAAA,GAAAA,UAAAA,EAAAA,YTk4DUR,KAEFR,ESh4DRsB,aAAAA,SAAAA,EAAAA,GACAnB,EAAAA,MACAze,OAAAye,ETi4DYa,OSh4DZM,KTm4DQtB,EAAWuB,eAAiB,SAAS7f,EAAQsf,GAE3C,IAAK,GSj4Dfb,GTi4DmB3b,EAAI2b,EAAgB9b,OAAQG,KS93D/Cwb,GAAAA,EAAAxb,GAAA9C,SAAA8C,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACA2b,EAAAA,CTg4Dc,OAGJA,EAAgBhF,OAAOmG,EAAU,IAEnCtB,EAAWlR,SAAW,SAAStK,GSr3DvCmI,EAAAnI,GAAA2G,SAAA,WAGA2B,EAAAzC,OACA2V,ETqvDM,GSh7DNT,GAAA5hB,QAAAuB,QAAAQ,GACAmhB,EAAAljB,QAAAI,QAAAJ,EAAAI,KAAA0hB,oBACAA,EAAAI,QAAA9b,QAAApG,EAAAI,SAAAwI,KTgjEM,OSr3DN3F,OTu3DK+L,USt3DLzN,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GTu3DI,OACEuN,SAAU,MACVnM,KSr3DN6gB,SAAAxB,EAAAriB,EAAAA,GACA6jB,GAAAA,IAEA5gB,MAAAsN,ETs3DQhP,SSp3DRsiB,SAAAD,SAAAA,UAAA7f,SAAA3D,GACAyjB,QAAA/W,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KTs3DQ,ISp3DR9M,GAAAqiB,EAAAriB,ETq3DQ6jB,GSp3DRA,aAAA7jB,EAAA+D,OAAA3D,GTq3DQ6C,EAAMsN,IAAI,WAAY,WAChBsT,IACFA,EAAUD,eAAe5jB,EAAQ+D,OAAQ3D,GS92DrD4O,EAAAlC,WAGAqC,EAAA,KACAnO,EAAA,YTk3DOgO,US92DP8U,mBAAA,aAAAjY,WAAA,aAAAiY,aAAA,SAAApY,EAAAmW,EAAA1Z,EAAAka,GT+2DI,OACElT,SAAU,IACVnO,QAAS,SAAkBZ,EAASyL,GAClC,GAAIvI,GAAWlD,EAAQ,GAAGiP,iBAAiB,eU1mEnD9N,SAAAd,QAAA6C,EAAA,SAAAygB,GAIAnjB,GAAAA,GAAAA,QAAAA,QAAAA,EACA8b,GAAAA,SAAA7Q,KAAA,eAAA,IAAAA,KAAA,cAAAiY,EAAAjY,KAAA,gBV6mEEtK,QUvmEFd,OAAA,4BAAAuD,SAAA,UAAA,WVwmEI,GUxmEJpD,GAAAA,KAAAA,UVymEM8b,YAAa,SACbsH,UAAW,mBUrmEjBhV,QAAAA,EAIAjO,MAAAkE,KAAA,WACAkK,OACAnM,SAAApC,MVumEKoO,UUlmELzN,YAAAyL,UAAApL,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GVmmEI,GAAIhB,GAAWqjB,EAAQrjB,QACvB,QACEuO,SU/lEN,IVgmEMnM,KU9lEN,SAAA+M,EAAAA,EAAAA,EAAAA,GV+lEQ,GU7lER/P,GAAAkkB,QAAA9jB,KAAAQ,EV8lEQW,SU5lERA,QAAAC,OAAA0iB,KAAAA,GAAAC,SAAAA,GAEA5iB,QAAA6iB,UAAA7iB,EAAAnB,MAAA+jB,EAAAA,GAAAA,EAAAA,MV6lEQlhB,EU3lERmN,OAAApQ,WV4lEU,MU3lEVqkB,GAAAC,QV4lEW,SAASrU,EAAUF,GACpB,GU3lEVmU,GAAA9jB,EAAAmkB,GAAAF,iBAAA,MAAArkB,EAAAgkB,UAAA,IV4lEUziB,SU1lEVijB,QAAA9Z,EAAAuF,SAAAkU,GV2lEY,GU1lEZC,GAAA5W,QAAAxN,QAAA0c,GV2lEgB2H,EU1lEhBD,EAAAvY,KAAA7L,EAAAgkB,WAAAphB,QAAA,IAAA,MACAwhB,GAAAzV,SV2lEc0V,EAAU,IAAMA,EAAU,IAE5B,IAAIG,GAAS,GAAID,QAAOF,EAAS,IAC7BG,GAAO9Z,KAAKuF,GACdmU,EAAU5W,SAASxN,EAAQ0c,aWlpEzCjc,EAAAkO,YAAA3O,EAAA0c,sBX2pEEnb,QWjpEFX,OAAAA,4BAAAA,SAAAA,UAAAA,WXkpEI,GAAIA,GAAWG,KAAKH,UAClB8b,YAAa,SW9oEnB1N,YAAA,QXipEIjO,MW9oEJoO,KAAA,WACA+D,OACAlS,SAAAJ,MXipEKoO,UW9oEL1L,kBAAA+L,WX+oEI,OACEF,SW9oEN2U,IX+oEM5Q,QW9oEN4Q,UX+oEM9iB,QW9oEN8iB,SAAA1jB,EAAA0T,GX+oEQ1T,EAAQyL,KAAK,cAAe,WAC5BzL,EAAQsC,WAAW,WACnB,IAAIY,GAAWlD,EAAQ,GAAGiP,iBAAiB,yBWzoEnDL,SAAAxN,QAAA8B,EAAA,SAAAygB,GAEAnjB,GAAAA,GAAA6jB,QAAA7jB,QAAAA,EACA8jB,GAAAA,KAAAA,cAAA,IAEAZ,EAAAjY,KAAA,WAAAA,EAAAiI,QAAA,IAAAgQ,EAAAjY,KAAA,gBX4oEKmD,UWvoELhP,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GXwoEI,GWroEJA,GAAA+jB,EAAAvkB,SACAskB,EAAAC,oBXsoEI,QACExV,SWpoENuV,IXqoEMxR,QWpoEN0R,UXqoEM5hB,KAAM,SAAkBC,EAAO7C,EAASyL,EAAM5K,GWnoEpD,GAAA4jB,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAAha,SACAma,EAAA5hB,EAAA4I,EAAAgZ,SAAAA,EXqoEYD,GAAYrjB,QAAQyL,UAAUnB,EAAK+Y,YAAa/Y,EAAK+Y,SWjoEjEE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAAjZ,EAAA+Y,WXooEQ,IWjoERC,KAAA/I,QAAA8I,UAAAC,EAAAA,aAAAA,EAAAA,UXkoEYH,GAAoBha,KAAKmB,EAAKgZ,cW/nE1C5jB,EAAAoT,EAAAA,MAAAC,EAAAuQ,YXkoEQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EAC3DC,KW5nEZ7jB,EAAA0Q,SAAA2C,KAAA,SAAAwH,GAEA,MAAAiJ,GAAA9jB,EAAAiT,IX8nEUjT,EW5nEV0jB,YAAArQ,KAAA0Q,SAAAD,GACA7D,MAAAA,SAAA+D,OAAAA,EAAAvI,MAKAtc,EAAA8kB,QAAAC,WACAliB,GAAAA,KAAAhC,EAAAiT,UX2nEUtG,GWznEV,WACA3M,IAAA4Q,EAAAA,GAAAA,QAAAqP,GX0nEYA,EAAc+D,YAAYjlB,EAAQ0c,YAAaqI,MAGnD3kB,EAAQ8kB,KAAKllB,EAAQmlB,YAAa,WAChCliB,EAAMwd,OAAO,WACNkE,GWnnEjB3V,EAAA6C,eAAAqP,EAAAkE,SAAA,WAGAjW,EAAAwC,mBXwnEO3C,UWnnEP1L,eAAA,WXonEI,OACE6L,SWnnEN5N,IXonEM2R,QWnnEN3R,UXonEMP,QAAS,SAAkBZ,EAASyL,GAClCzL,EAAQyL,KAAK,cAAe,WAC5BzL,EAAQsC,WAAW,WW9mE3BsM,IAAAA,GAAA5O,EAAA,GAAAiP,iBAAA,sBAEAzO,SAAAA,QAAA6jB,EAAA7jB,SAAAA,GACA8jB,QAAAA,QAAAA,GAAA7Y,KAAA,WAAA,IAEAtK,QAAAnB,QAAA2jB,GAAAlY,KAAA,WAAAA,EAAAiI,eXinEK9E,UW5mELhP,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GX6mEI,GW1mEJA,GAAA+jB,EAAAvkB,SACAskB,EAAAC,oBX2mEI,QACExV,SWzmENa,IX0mEMkD,QWzmEN,UX0mEMlQ,KWzmENvB,SAAAiO,EAAA2V,EAAAA,EAAAA,GX0mEQ,GWtmERpkB,GXsmEYjB,EWzmEZY,EACAa,EAAA4jB,UAAAA,EAAAA,GAAAA,SX0mEYnE,EAAgByD,EAAUvkB,EAAQ+M,SAAW/M,CAEjDyL,GAAKmE,SAAS,QAAS,SAASqV,GWpmExC5jB,EAFAkQ,iBAAAA,IAAA+S,EAAAha,KAAA2a,GAEAN,EAAAxjB,MAAAA,GAEAojB,EXwmEU1jB,EAAW0Q,YWlmErBvR,EAAA8kB,QAAAC,WACAliB,GAAAA,GAAA1B,QAAAuQ,OAAA7Q,EAAAiT,WAAAzS,EXqmEUmM,GWnmEV3M,WACAA,IAAA0Q,EAAAA,GAAAA,QAAAA,GXomEYuP,EAAc+D,YAAYjlB,EAAQ0c,YAAaqI,MAGnD3kB,EAAQ8kB,KAAKllB,EAAQmlB,YAAa,WAChCliB,EAAMwd,OAAO,WYzwEvBlf,EAAA+jB,cAAA/jB,GACAd,EAAAkR,mBZgxEMpQ,QY/vENmM,QAAA4X,MAAA,GAAA/jB,QAAAmM,QAAA6X,IAAA,IZgwEIhkB,QY/vEJikB,OAAAA,MAAAA,QAAApZ,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GZgwEM,GAAI8S,GAAwBjO,EAAQiO,uBAAyBjO,EAAQwU,6BAA+BxU,EAAQyU,yBY7vElHF,EAAA7H,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACAgI,IAAAve,EACAwe,EAAAD,EAAA,SAAAhI,GZ+vEQ,GY9vERvW,GAAAA,EAAAye,EZ+vEQ,OAAO,YACLL,EAAqBpZ,KY1vE/B,SAAAwZ,GZ6vEQ,GAAIC,GAAQze,EAASuW,EAAI,OAAO,EAChC,OAAO,Ya7xEfld,EAAAqlB,OAAAD,IAQA9kB,ObyxEM6kB,GAAIG,UAAYJ,EazxEtB1gB,Kb6xEE1D,QatxEFd,OAAAT,0CAAAsL,SAAAA,gBAAAA,WbuxEI,GatxEJiI,GAAAA,KAAAyS,UbuxEMxB,OapxENnU,+KbsxEItP,MapxEJkE,MAAAghB,SAAAA,KAAAA,SAAAA,EAAAA,GbqxEM,QanxENC,GAAAA,EAAAA,GbqzEQ,Qa3wERzkB,GAAAwB,EAAA5B,Gb4wEU,Ma3wEVsS,GAAA7H,IAAA,SAAAuE,EAAAiB,Gb4wEY,Ga5wEZ7P,GAAA6P,EAAAyD,IAIAxB,Ob2wEYlS,GAAO4kB,GAAa5V,EACpB0E,EAAQoR,EAAUljB,EAAO5B,GACzBI,EAAQ2kB,EAAQnjB,EAAO5B,Ia5wEnC0T,MAAAxB,Eb+wEc9R,MAAOA,Ea3wErB4kB,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACA7S,GAAAS,UAEAT,IAAAA,GACAA,EACA4S,EACAF,EACAC,EACAI,EACAF,CCxBAhgB,Od0yEQmN,GajxERqL,KAAAvO,WbkxEUkD,EAAcM,OAASxD,EAAQxE,EAAKwE,MAAMrQ,EAAQwkB,Qa/wE5DjR,EAAAS,EAAAA,EAAA,IAAA3D,EAAApN,IACAgjB,EAAAhkB,EAAA+R,IAAA/Q,EAAAA,GbixEUijB,Ea/wEV3kB,EAAAmf,GbgxEU4F,Ea/wEV3S,EAAAA,EAAAA,IAAAA,IbgxEUyS,EAAUxH,EAAOvO,EAAM,GAAKA,EAAM,GAAK4V,GACvCjS,Ea/wEVT,EAAAyS,EAAAA,KbixEQzS,EAAcS,SAAW,SAAS/Q,EAAOhC,GACvC,MAAOiB,GAAGD,KAAK+R,EAAS/Q,EAAOhC,IAAad,KAAK,SAASwT,GAKxD,MalxEZJ,SAAAa,QAAAA,KACAnR,MAEAsQ,EAAA4S,QAAAljB,EAAAA,OAAAA,EAAAA,EAAAA,Mb+wEmBsQ,EAAcyS,WAGzBzS,Ea3wERlS,aAAAA,SAAAA,Gb4wEU,Ga3wEV4B,Kb6wEU,OADAA,Ga3wEVxB,GAAAA,EACAJ,EAAA4kB,IC3DAtI,EAAAA,OAOAvX,Edm1EM,MAAOigB,OAGX9kB,Qc10EFnB,OAAAA,wCAAAmmB,QAAA,aAAA,Wdy6EI,QcvxEJC,GAAAC,GdwxEM,GAAIA,GAAarmB,EAAQsmB,cc9wE/B1e,EAAA5H,EAAAA,cAAAumB,CACA,IAAAllB,EAAArB,EAAAyJ,aAAAA,MAAAA,GAAAA,eACA,MAAA8c,IAAAvgB,EAAAogB,EAAA,SAAA,WAAA7I,EAAAlU,IAAA+c,EAAA,aACA/kB,EAAAgI,EAAA+c,YdixEM,Oc/wEN/kB,IAAArB,EAAAsI,gBd0qEI,Gc10EJjH,Md20EQ2E,Ec10ERwgB,EAAAA,SAAAC,SAAAzmB,EAAAsd,Gd20EM,Mc10ENjc,GAAAmlB,UAAAC,EAAAzmB,SAAAyI,gBAAAA,EAAAA,cdi8EI,OArHA8U,GAAGlU,Ic10EPhI,SAAArB,EAAAyI,EAAAA,Gd20EM,GAAIpH,EAQJ,OANEA,Gc30ERrB,EAAA0mB,ad20EgB1mB,EAAQ2mB,aAAale,Gcl0ErC+d,EAAAC,iBACAG,EAAA5mB,iBAAAwH,GAAAA,GAEAxH,EAAA6mB,MAAApe,GAEAb,KAAAgf,EAAAhf,WAAA5H,IAAAyJ,EAAAA,Gdq0EI8T,EAAGvV,Ocn0EP4e,SAAA9e,Gdo0EM,GAAI8e,GAAU5mB,EAAQwH,wBAClB6e,EAAarmB,EAAQsmB,aczzE/B/I,QACA5V,MAAAmf,EAAAA,OAAAA,EAAAA,YACAlf,OAAAmf,EAAAA,QAAAA,EAAAA,aACAlf,IAAAmf,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACAlf,KAAAmf,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,Kd6zEI1J,Ec1zEJtU,UAAAie,SAAAA,EAAAA,EAAAA,GACA,GAAAte,GACAue,EACA/d,EAGAR,EACA5I,EdyzEUonB,EctzEVC,EACAL,EAAA3d,EAAAA,IAAArJ,EAAA,YACAonB,EAAA7J,QAAAvd,QAAAA,GACAknB,IAKAA,YAAAA,IACAJ,EAAAA,MAAAvJ,SAAA3U,YdqzEMye,EcnzENP,EAAAA,OAAAA,GdozEME,EcnzENzJ,EAAAlU,IAAArJ,EAAA,OdozEMonB,EcnzENzb,EAAAA,IAAAA,EAAAqb,QdozEME,GcnzENE,aAAAzb,GAAA,UAAA/C,KAAAoe,EAAAI,GAAAjK,QAAA,WdozEU+J,GcjzEVJ,EAAAxhB,EAAAA,SAAA1F,GACAA,EAAAA,EAAA0nB,IdmzEQP,EAAUD,EAAYhf,Oc/yE9BsB,EAAAvB,WAAAA,IAAAwf,EdkzEQN,EAAUpb,WAAWyb,IAAe,Gc/yE5Che,QAAAtB,WAAAA,KdkzEQlI,EAAUA,EAAQ0nB,KAAKtnB,EAASyG,EAAG4gB,Ic9yE3CC,OAAA1nB,EAAAsJ,MdizEQE,EchzERvB,IAAAjI,EAAAiI,IAAAwf,EAAAxf,IAAAof,GAEA,OAAApf,EAAAuB,OdizEQA,EchzERtB,KAAAsB,EAAAtB,KAAAuf,EAAAvf,KAAAif,GdkzEU,SAAWnnB,GACbA,EAAQsJ,MAAMoe,KAAKH,EAAS/d,GctyEpC+d,EAAAI,KAAA1f,IAAAuB,EAAAvB,IAAA,KAAAC,KAAAsB,EAAAtB,KAAA,Qd8yEIyV,EczyEJ3U,SAAA5I,SAAAA,Gd0yEM,Gc9xENwnB,GACAD,EAVAvf,GdwyEQH,IctyER,EAGA2f,KAAAA,EA4BA,Od4wE0C,UAAhCjK,EAAGlU,IAAIrJ,EAAS,Yc/xE1BunB,EAAAA,EAAA1f,yBdkyEQ2f,EAAiBC,EAAoBznB,Gc7xE7CgI,EAAAuV,EAAAvV,OAAAhI,GACA2H,EAAA3H,EAAA4J,UACAhC,EAAA6B,EAAAA,OAAAA,IAEA3B,EAAAA,KAAAyf,EAAAA,IAAAA,EAAAle,kBAAA,Gd+xEQke,EAAiBzf,MAAQyV,EAAGlU,IAAIme,EAAgB,mBAAmB,KcpxE3E7f,MAAA0e,EAAArmB,YACA4H,OAAAwe,EAAAA,aACAve,IAAA7B,EAAAogB,IAAAA,EAAAve,IAAA0V,EAAAlU,IAAAgd,EAAA/d,aAAAA,GACAR,KAAAse,EAAAA,KAAAA,EAAAA,KAAAA,EAAA/c,IAAArJ,EAAAqJ,cAAA+c,KdmyEI7I,Ec/wEJ3V,OAAAvG,SAAAA,EAAAA,GdgxEM,GAAIA,GAAQrB,EAAQyJ,YAMpB,Oc5wEN9B,GACAtG,GAAAA,EAAArB,IAAAA,EAAA4J,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEAvI,GAAAkc,EAAAlU,IAAArJ,EAAA,cAAA,GAAAud,EAAAlU,IAAArJ,EAAA,iBAAA,GAAAud,EAAAlU,IAAArJ,EAAA,kBAAA,GAAAud,EAAAlU,IAAArJ,EAAA,qBAAA,GAEAqB,GdywEIkc,EcvwEJ5V,MAAAtG,SAAAA,EAAAA,GdwwEM,GAAIA,GAAQrB,EAAQ4J,We58E1B,ODuMA2c,GduwEQllB,GAASkc,EAAGlU,IAAIrJ,EAAS,cAAc,GAAQud,EAAGlU,IAAIrJ,EAAS,eAAe,Geh9EtFqB,GAAAkc,EAAAmK,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEAtmB,GAEAkc,Ifo9EEpc,Qel9EFd,OAAAuK,sCAAAub,QAAA,YAAA,WAAA,SAAAnf,Gfm9EI,Mel9EJA,UAAA0e,EAAA9a,EAAAA,Gfm9EM,GAAIA,GAAU,IACd,Oel9ENA,Yfm9EQ,Gel9ERA,GAAAjK,KACAinB,EAAAD,UACAD,EAAAlkB,IAAAokB,CAkBA,Ofi8EYhd,IACF5D,Eel9EV0e,OAAA9a,Gfo9EQA,Eel9ERpH,EAAAqkB,Wfm9EUjd,EAAU,Kej9EpBA,Gfm9EY8c,EAAKlkB,MAAMqkB,EAASD,Ie38EhCzB,GAAA,GACA2B,GACAld,EAAAA,MAAAid,EAAAD,GAEAhd,Ofg9EOub,Qe78EPvb,YAAA,WAAA,SAAA5D,Gf88EI,Me78EJ,UAAApH,EAAAmoB,EAAAA,Gf88EM,GAAInd,Ge78EVpH,If+8EM,OADK5D,KAASA,Me58EpBgL,Wf88EQ,Ge78ERA,GAAAjK,KACAinB,EAAAhoB,Sf88EagL,KACChL,EAAQmoB,WAAY,GACtBL,Ee78EZM,MAAAH,EAAAD,Gf+8EUhd,EAAU5D,EAAS,WACjB4D,EAAU,KACNhL,EAAQqoB,YAAa,GgBhgFrC5nB,EAAAmD,MAAAqkB,EAAAD,IAOAM,GAAA,ShBigFE/mB,QgB5/EFR,OAAA0Y,wCAAAzV,SAAA,eAAA,kBAAA,SAAAukB,GhB6/EI,QgB5/EJC,KhB6/EMznB,KAAKunB,KAAO,KgB1/ElBG,KAAAA,MAAAC,EAAA3nB,KAAAynB,IAAAA,EhB6/EMznB,KAAKsY,MAAQ,EgB5/EnBoP,KAAAA,QAAAC,EAAA3nB,KAAA0Y,QAAAhY,EhB+/EMV,KAAKynB,aAAe,EAwCtB,QgBrgFJG,MhBsgFI,QgBrgFJ9V,GAAAlH,GhBsgFM,OgBtgFNvC,MAAAvC,WAAAA,KAAAA,SAAAA,GhBwgFI,QAAS+hB,GAAuB/V,EAAOpR,GgBngF3C,IAAAb,GAHAioB,GAAAhW,EAAAnM,OhBwgFUoiB,EAAMrnB,EAAMsnB,WAAWpd,cgBrgFjC/K,EAAAG,EAAAA,EAAAH,EAAAA,IACAuV,GAAAA,EAAAtP,GAAA8E,gBAAAmd,EACAE,MAAAniB,EAKA,UhBk9EI4hB,EgBhgFJlP,UAAA9X,gBAAAA,SAAAA,GhBigFMV,KAAKynB,aAAe/mB,GAEtBgnB,EgBlgFJpP,UAAA5X,WAAAA,SAAAA,GhBmgFMV,KAAK0Y,QAAUhY,GAEjBgnB,EgBpgFJ1nB,UAAAsY,WAAAA,SAAAA,GhBqgFMtY,KAAKwY,QAAU9X,GAEjBgnB,EgBtgFJQ,UAAAxnB,SAAAA,SAAAA,GhBugFMV,KAAKsY,MAAQ5X,GAEfgnB,EgBxgFJS,UAAAznB,SAAAA,WhBygFM,MAAOV,MAAKsY,OAEdoP,EgB1gFJH,UAAA7mB,QAAAA,SAAAA,GhB2gFMV,KAAKkoB,IAAMxnB,GAEbgnB,EgB3gFJH,UAAAa,SAAAA,SAAAA,GACApoB,KAAAmoB,MAAAznB,GhB6gFIgnB,EgB3gFJpP,UAAA5X,YAAA8U,SAAAA,GACAxV,KAAAwY,KAAAA,GhB6gFIkP,EgB3gFJD,UAAAA,SAAA5Q,SAAAA,GAaA,MAZA7W,MAAAunB,KAAAvnB,EAAAA,chB4gFMA,KAAKmoB,MAAQznB,EAAM2nB,WgBzgFzBX,KAAAA,IAAAC,EAAAA,UACA3nB,KAAAsY,MAAAN,EAAAhY,WhB2gFMA,KAAKwY,QAAU9X,EAAMiX,agBxgF3B3X,KAAAsoB,QAAAZ,EAAAC,aAEA3nB,KAAAynB,aAAAG,EAAAA,kBAGAW,MhBwgFIb,EAAUC,UAAUa,OAAS,WgBpgFjC,MAAAX,IAAAA,MAAAA,KAAAA,KAAAA,KAAA/V,MAAApR,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,chBugFI,IgBrgFJ4nB,GAAA5nB,EAAAsnB,UAkBAnoB,EAAAsb,KAAAA,UhBmgFM/F,OgBhgFNqT,YhBigFMR,QgBhgFNS,EhBkgFI1oB,MAAKkE,MgBhgFTjF,UAAAgpB,aAAA,SAAAU,EAAAC,GhBigFM,GgBhgFNC,GAAA,SAAAte,GhBgpFQ,QgBj+ERue,GAAA1T,GACA,GAAA2T,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GhBm+EQ,QgBh+ER1oB,GAAA4U,GhBi+EU,GgBh+EV+T,GAAAC,EAAAhU,GACAiU,EAAAC,EAAAD,QAAAA,MAAAA,QhBi+EcP,EgBh+Ed,kBAEAC,EAAAC,EAAArjB,MAAAG,GhBg+EcmjB,EgB/9Ed3kB,OAAA2kB,KAAAA,GhBg+EcM,IAWJ,OAVA/oB,SAAQC,QAAQsoB,EAAa,SAASM,GgB99EhDE,GAAAA,EAAAF,GhBg+EcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAIvjB,GAAI,EAAGA,EAAImjB,EAAatjB,OAAQG,IgB59EvDujB,EAAAG,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAH,KAAAA,KhBq9EiBG,EAAe9I,KAAK,IAE7B,QgBl9ERgJ,GAAAA,GhBm9EU,MAAOA,GAAK5nB,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QgBj9ERonB,GAAAC,GACA,MAAAQ,SAAAC,KAAAA,GhBm9EQ,QgB/8ERD,GAAAD,GhBg9EU,MAAOA,GAAK5nB,QAAQ,WAAY,MAElC,QAAS+nB,GAAoBD,GgB18ErC,IAAA,GAFAV,GAAAY,OAAAzU,KAAAA,GACAsU,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,IhB88EYA,EAAKA,EAAGplB,MAAM,KAAOwB,EAAI,KAAK2a,KAAK,IAAMgI,EAAUQ,EAAanjB,IAAM,IgB18ElF,OAAAmjB,IAAAA,QAAAA,IAAAe,EAAAd,KAAAT,MhB88EQ,QgB58ERwB,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,GhB88EQ,QgB58ERC,GAAAA,GhBo9EU,IgBj9EV,GAEAD,GACAE,EAEAD,EhB08EcC,EgB/8EdpB,EAAAgB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,KhBy8EqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KgBt8EjDxO,EAAAxP,EAAAA,GACAwe,EAAAhP,EAAAA,GhBw8EYkP,EAAgBG,EAASL,GgBp8ErCC,EAAAK,KAAAA,EhBu8EU,OAAOL,GAzMT,GgB38ERjP,GACAuP,EAtDAC,EAAA1C,QAAAjnB,UAAAnB,EAAA0K,GACAqgB,KACAC,GACAC,IAAA,WACAC,GAAA9rB,aACAugB,EAAAvgB,EAAAgpB,OAAA,cAAA,mBACA+C,GAAAA,aACAC,EAAAA,EAAAtC,OAAAuC,cAAAC,mBACAC,GAAA,mBACAC,EAAApsB,EAAAgpB,OAAA,iBAAA,oBACAqD,GAAAA,oBACAC,EAAAA,EAAA5C,OAAAuC,eAAAM,iBACAC,EAAAA,QACAC,KAAAzsB,EAAAgpB,iBAAA0D,IAAAlL,KAAA,KACAmL,IAAAA,EAAAV,iBAAAC,SAAA1K,KAAA,KACAoL,GAAA,yBACAC,EAAA7sB,EAAAgpB,OAAA,yBAAA,2BhBigFUqD,KAAM3C,EAAQuC,iBAAiBa,MAAMtL,KAAK,KgB9/EpD8K,IAAAf,EAAAA,iBAAAA,WAAAA,KAAAA,KACA9B,GAAAA,gBACAhV,EAAAA,EAAAyE,OAAAA,eAAAA,iBACA6T,KAAA1D,gCACAO,GAAAP,WACAqC,EAAArC,EAAApQ,OAAAA,wBAAAA,kBAEA2S,GACAC,IAAAxC,EAAArQ,gBACA8S,GAAAzC,EAAArQ,WACA+S,EAAAA,EAAApD,WACAqD,GAAAA,EAAArD,WACAwD,EAAAA,EAAA9C,WACA+C,GAAA/C,EAAA2D,SACAzM,EAAA8I,EAAArQ,ShBggFU6S,GgBhgFVxC,EAAAhQ,ShBigFUyS,EgBjgFVzC,EAAAtoB,ShBkgFUgrB,KAAMpD,EgBjgFhB0D,IAAAA,EhBmgFUF,GgBngFV9C,EAAAtoB,QhBogFUqrB,EAAG/C,EAAM2D,QgBngFnBV,EAAAA,SAAA7qB,GAAA,GAAA4X,GAAA4T,KAAAA,WAAArE,EhBsgFY,OAAO7nB,MAAKiY,SAASvX,EAAM4O,MAAM,OAASgJ,EAAQ,GAAKA,IAEzDgT,KgBvgFV,SAAAY,GhBwgFY,MAAOlsB,MAAKksB,SAASrE,EAAuBc,EAAQuC,iBAAiBa,MAAOrrB,KAE9E6qB,IgBzgFV,SAAAW,GhB0gFY,MAAOlsB,MAAKksB,SAASrE,EAAuBc,EAAQuC,iBAAiBM,WAAY9qB,KgBxgF7FmrB,GAAA,SAAAnrB,GAAA,MAAAV,MAAA4a,SAAAA,EAAAla,EAAA,IACAorB,EAAA,SAAAprB,GAAA,MAAAV,MAAAU,SAAA,EAAAA,EAAAiF,IhB+gFUimB,KAAMtD,EAAM1N,YgB3gFtBiR,GAAAM,SAAAA,GACAzB,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGAvP,EAAAA,SAAAiR,GACAD,MAAAE,GAAAA,GAAAA,IAAAD,IAAAjR,EAAAA,OAAAiR,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OjBmoFQjR,GgB1gFRgR,KAAAxiB,WhB2gFUwR,EAAYiR,QAAUzD,EAAQuC,iBAAiBjsB,EAAQmW,SAAWnW,EAAQmW,OgBxgFpF+F,EAAAA,EAAAA,EAAAmR,SAEA5B,EAAAtV,EAAAuT,EAAAuC,UhB0gFQ/P,EgBxgFRoR,QAAAnX,SAAAiX,GACA,MAAAG,SAAAA,OAAApX,IAAAyU,MAAAA,EAAAzU,WACA3E,EAAAA,KAAA8b,IhB0gFQpR,EgBvgFR3E,MAAA8V,SAAAjkB,EAAAikB,EAAA1U,EAAAxD,GACAgB,IAAAtP,EAAA2K,EAAA9K,iBAAAyP,IAAAA,GACA5U,QAAAgsB,OAAA1mB,KAAA0mB,EAAAA,EAAAhW,EAAA/F,GAAA0K,EAAAiR,QAAAhY,GhBwgFU,IAAImY,GAAcnX,EAASiX,EAAgBjX,GAAU+W,EgBrgF/DjT,EAAAsP,EAAAA,EAAAA,GAAAA,EAGAhgB,EAAAgO,EAAA+T,KAAArR,EhBqgFU,KgBpgFVzI,EAAA,OAAA,CAGA,KAAA,GhBkgFc+F,GAAO8V,IAAajkB,MAAMikB,EAAS1U,YAAa,GAAI8P,IAAY+E,SAASH,IAAY,GAAI5E,IAAY+E,SAAS,GAAIzU,MAAK,KAAM,EAAG,EAAG,IgBlgFjJkB,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IhBogFgBsT,EAAa1mB,IAAI0mB,EAAa1mB,GAAG6gB,KAAKnQ,EAAM/F,EAAQ3K,EAAI,GgBhgFxE,IAAA0Q,GAAAA,EAAAA,QAEA,OAAA9V,UAAAA,EAAAwnB,IAAA,MAAAhP,EAAAwT,WAGAxT,GhBmgFQiC,EgBjgFR3E,oBAAAmW,SAAAjsB,EAAAiF,GhBkgFU,GAAI6Q,EACJ,IgBjgFV,UAAAA,EAAA9V,ChBkgFY,GAAIksB,GAAQ,GAAI5U,KAChBxB,GgBjgFZ,GAAA+R,MAAAA,EAAA7nB,cAAAksB,EAAAvE,WAAAuE,EAAAF,WAAA,YAAA7rB,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,UAGA2V,GAFAhW,QAAAgI,SAAA9H,IAAAA,EAAA4O,MAAA,UhBkgFgB5O,EgBjgFhBF,MAAAA,KACAK,GAAAA,MAAAH,EAAAisB,OAAAlY,EAAAA,EAAAA,OAAAA,IAEA,GAAAuD,MAAAtX,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,IAGA8V,EAAAA,GhBigFmB,GAAIwB,MAAKxP,SAAS9H,EAAO,KgB9/E5CmsB,QAAAA,SAAAA,IAAAnsB,IAAAA,EAAAG,OACAuV,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAA4B,MAAAA,EhBggFU,OgB9/EV5B,IhBggFQ+E,EgB9/ER0R,oBAAAnsB,SAAAka,EAAAA,GhB+/EU,GAAIxE,EgBv+Ed,OhBy+EYA,GgB//EZvV,QAAAuV,GACA,GAAA4B,OAAA4C,YAAA,KAAA,EAAA,GACAO,QAAAA,SAAAza,IAAAsX,EAAA1I,MAAA,UhB+/EmB,GAAI0I,MAAKtX,EAAMisB,OAAO,EAAGjsB,EAAMiF,OAAS,IAAIiV,YAAY,KAAM,EAAG,GgB5/EpFxE,EAAAA,GhB8/EmB,GAAI4B,MAAKxP,SAAS9H,EAAO,KAAKka,YAAY,KAAM,EAAG,GgBl/EtEkS,QAAAA,SAAAA,IAAAtW,IAAA9V,EAAA8V,OACA,YAAAA,IAAA/B,EAAAA,KAAAA,EAAAA,GhBq/EmB0G,EAAYI,MAAM7a,EAAO,GAAIsX,MAAK,KAAM,EAAG,EAAG,KgBx+EjEmD,EAAAE,qBAAA,SAAA7E,GACA,MAAAA,IAIAA,EAAApC,SAAAA,EAAAA,WAAA,GAAAoC,EAAAhB,WAAA,EAAA,GACAgB,GAJA,MhBi/EQ2E,EAAYE,qBAAuB,SAAS7E,EAAMpC,EAAU2Y,GgB1+EpE,MAAAvW,IAYAkT,GAAAI,QAAAA,IACAtT,EAAAoT,GAAAA,MAAAA,EAAAA,WhBm+EYpT,EAAK0B,WAAW1B,EAAKmB,cAAgBoV,KAAY,GAAKvW,EAAKwW,sBgB/9EvE7D,GhB29EmB,MiB1sFnBnpB,EAAAitB,OACAtE,EAKA3oB,OAAAktB,QjB8wFE1sB,QiB1wFF2sB,OAAAA,2CAAA7W,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GjBoxFI,QiBrwFJ8W,GAAAjZ,GjBswFM,MAAO,wCAAwCoW,KAAKnV,GAAQtG,MAAM,GAVpE9O,KiB1wFJitB,iBAAA/B,WjB2wFM,MAAOvC,GAAQtd,IAEjBrL,KiBzwFJktB,kBAAA,SAAA9X,EAAAkB,GjB0wFM,MAAOqS,GAAQuC,iBAAiB9V,IAAWA,GAE7CpV,KiBvwFJmtB,cAAAC,SAAAjZ,GjBwwFM,MAAOwU,GAAQuC,iBAAiBC,UAKlCnrB,KiBnwFJ+W,YAAAqW,SAAAjZ,GjBowFM,MAAOiZ,GAAgBjZ,GAAY,IAErCnU,KiBjwFJmX,cAAAiW,SAAAjZ,GjBkwFM,MAAOiZ,GAAgBjZ,GAAY,IAErCnU,KiB/vFJoX,cAAAgW,SAAAjZ,GjBgwFM,MAAOiZ,GAAgBjZ,GAAY,IAErCnU,KiB7vFJiX,cAAAmW,SAAAjZ,GjB8vFM,MAAOiZ,GAAgBjZ,GAAY,IAErCnU,KiB5vFJqX,YAAAuR,SAAAxT,GjB6vFM,QAASgY,EAAgBjZ,GAAY,IEpzF3C3T,KAAAA,OAAA,SAAA2T,GAGA,QAAArR,EAAA3B,GAAAP,IFszFIZ,KEvvFJmV,WAAA3V,SAAAgX,EAAApB,EAAAnW,EAAAA,GFwvFM,MEvvFNkB,GAAAqW,EAAApB,EAAAhB,OF0vFE5T,QAAQd,OAAO,0BAA2B2tB,QAAQ,cAAevqB,GAwFjEtC,QG94FF0C,OAAA,wBAAA,sBAAA,sCAAAD,SAAA,SAAA,WH+4FI,GG94FJjE,GAAAgB,KAAAH,UACAL,UAAA,UACAgC,kBAAA,UACAoK,YAAA,GACAvM,YAAA,QACAiuB,YAAA,QACAjqB,UAAA,MACAzB,YAAA,uBACA0B,SAAA,GACAiqB,iBAAA,EACAC,WAAA,EH+4FMnuB,QAAS,KG54FfW,UAAAkE,EAEAb,UAAA5C,EACAmB,MAAAuc,EACA7a,MAAAmqB,EAEAF,KAAAG,KACAF,OAAAG,KH64FI3tB,MG14FJkE,MAAA0pB,UAAAA,aAAAA,cAAAA,WAAAA,WAAAA,OAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GHq5FM,QAASC,GAAatjB,GAyIpB,QAASyC,KGj1FjB8gB,EAAAppB,MAAAzF,EAAAwF,YAAA,QAAAqpB,GACAttB,QAAA0J,UAAAjL,EAAA2F,SAAApE,QAAAmE,WAAA1F,EAAA2F,SAEA3F,EAAA6F,OAAA7F,GHm1FU8uB,EAAajjB,KAAK,cAAe,SGh1F3CijB,EAAA9hB,GAAAA,QH22FQ,QGv0FRhN,KHw0FUiD,EGv0FVurB,MAAAA,EAAA3iB,YAAA,QAAAgjB,GHw0FcttB,QAAQyL,UAAUhN,EAAQ+F,SAAWxE,QAAQmE,WAAW1F,EAAQ+F,SAClE/F,EAAQ+F,OAAO8oB,GGr0F3BL,EAAA7f,UAAA3O,QAAAH,IHw0FY2uB,EAAY7f,YAAY3O,EAAQH,YAAc,SAC1CG,EAAQquB,UGr0FxBG,EAAAO,KAAAA,cAAAA,UAIA/uB,EAAAgvB,WHs0FYR,EGn0FZpuB,YAAA4J,EAAAnK,YAAAgK,SAAAA,EAAAzJ,WHs0FQ,QAAS2uB,KACP,GAAIE,GAAoB,8HGh0FlC,IAAAxmB,EAAAymB,cAAAA,CACA,GAAAzmB,GAAAyY,MAAAA,UAAAzQ,OAAAiX,KAAAoH,EAAA,GAAAzf,iBAAA4f,GAAA,SAAA7uB,GACA,MAAA4uB,GAAAD,YAAAA,GAAAA,EAAAA,aAAAA,GAAAA,IAAAA,EAAAA,eAEA,OAAAI,IHo0FQ,QGh0FR7d,GAAA7I,GHi0FU,GGh0FVA,EAAAumB,cAAA,CHi0FY,GAAIA,GAAYD,GAChB,IAAIC,IAAclvB,EAAW,MG9zFzCyG,KACAsoB,EAAA5jB,MAAAyd,UAAA0G,QAAA1H,KAAAsH,GHi0FY,IAAI1d,GG/zFhB0d,EAAAzR,QAAA9U,EAAAyY,cACA2N,OAAAxqB,GAAAA,EAAAA,IA+CA,QAAAgrB,KACArvB,EAAAquB,WACAS,EAAAloB,GAAAA,QAAA0oB,GACAC,EAAA3oB,GAAAA,QAAA0oB,GACAC,EAAA3oB,GAAAA,QAAA4oB,IAIA,QAAA1oB,KACA9G,EAAAoE,WACA0qB,EAAAzoB,IAAA,QAAAwoB,GACAC,EAAAloB,IAAA,QAAAioB,GHozFYU,EAAgB3oB,IAAI,QAAS4oB,IAGjC,QGlzFRxvB,KACA8uB,EAAAA,WACAA,EAAAloB,GAAAA,QAAAioB,EAAAA,UHmzFYC,EAAazoB,GAAG,UAAWwoB,EAAOlc,aAGtC,QG/yFR1M,KACAjG,EAAAquB,WACAQ,EAAA9hB,IAAAA,QAAAA,EAAAA,UHgzFY+hB,EG/yFZloB,IAAA,UAAAioB,EAAAlc,aHkzFQ,QAAS2c,GAAoBrpB,GG7yFrCA,EAAAupB,SAAAA,EAAAA,gBACAtpB,WAAAA,EAAAA,SH+yFY2oB,EAAO9hB,QG3yFnB8hB,EAAAA,QHgzFQ,QAASW,GAAoBvpB,GG1yFrCA,EAAAwpB,iBH6yFQ,QG3yFRA,KH4yFcZ,EAAO5jB,UAA6B,OAAjB6jB,IGzyFjCO,IACAP,KH4yFcW,IACFA,EAAWtkB,WGxyFvBskB,EAAAZ,MAMAC,IAEA7rB,EAAAA,SHqyFY6rB,EAAeD,EAAOnnB,SAAW,MGhqG7C,GAAA1H,MACA0uB,EAAAA,EAAAnlB,SAAAvJ,QAAAuuB,UAAA3tB,EAAA0K,GACAokB,EAAAA,EAAAA,SAAAhB,EAAA1tB,QAAAhB,GHq4FYiD,EAAQ4rB,EAAOrjB,OAASxL,EAAQiD,OAASjD,EAAQiD,MAAMwI,QAAUC,EAAWD,MG/3FxFojB,GAAA7uB,SAAAoM,EAAApM,YAEA6uB,EAAAc,UAAA,QAMA3vB,EAAAA,SH43FU0uB,EAAmBnlB,SAASvJ,EAAQuuB,OAAQ,IGx3FtDtrB,EAAAyrB,EAAA,IH23FQG,EGz3FRA,IAAAppB,EAAAA,IAAAA,EAAAA,SAAAA,EAAAA,QAAAA,KAAAA,OAAAA,GH03FQopB,EAAOc,YAAc,aACrBnuB,GAAU,QAAS,WAAa,SAASI,GGx3FjDguB,EAAAhuB,KAAAqB,EAAArB,GAAAoK,EAAAC,YAAAjM,EAAA4B,OH23FQqB,EGz3FR4rB,MAAAxqB,WH03FUpB,EAAMkJ,aAAa,WACjB0iB,EAAOppB,UAGXxC,EGz3FR4rB,MAAAtoB,WH03FUtD,EAAMkJ,aAAa,WACjB0iB,EAAOxqB,UGn3FnBpB,EAAA6rB,QAAAA,WACA7rB,EAAAwsB,aAAAA,WACAF,EAAAA,YHy3FQV,EGx3FR5jB,SAAAhI,EAAAgI,UAAA,CHy3FQ,IGz3FR/C,GAAA2nB,EAAAnmB,EH43FY6lB,EAAkBhuB,QAAQnB,QAAQ,eAAiBJ,EAAQH,YAAc,eA4P7E,OGvnGRqF,GAAAuE,KACA+C,SAAAA,QACAqiB,IAAAA,MH63FU3mB,KAAM,MG13FhB2mB,OAAAniB,MAGAhD,MAAA1J,QH23FQkF,EGz3FR2pB,KAAAxqB,SAAAA,GH03FUmI,EAAc7I,EACdkrB,EAAOniB,SGr3FjBmiB,EAAA/hB,KAAAA,WAGAgjB,EAAAA,MAGA7sB,EAAAssB,aAAA,WACAA,EAAAA,UHu3FQV,EAAO/hB,QAAU,WG/2FzB+hB,IACAA,IAEAU,EAAApiB,SACAoiB,EAAAriB,MHi3FUjK,EG/2FVkK,YHi3FQ0hB,EAAOxqB,KG/2Ff,WHg3FU,IG/2FVwqB,EAAA7uB,SH+2FU,CACA,GG/2FVmN,GACAD,CHw4FU,IAxBI3L,QG/2FdsL,UAAA7M,EAAA2M,YHg3FYQ,EG/2FZA,EAAAR,UHg3FYO,EG/2FZA,EAAAlN,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MHi3FgBJ,EAAQ2M,WG52FxBmiB,EAAAA,EAAAgB,EAAAA,WAIAL,EAAAA,EAAAZ,IAAArjB,EAAAC,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIAzL,EAAAquB,KAEAS,EAAAA,EAAArlB,SACA8lB,GAAA9lB,IH02FUgmB,EG12FVM,EAAAL,OAAAA,OH22FUZ,EAAeD,EAAOnnB,SAAW8E,EAAYxJ,KAAKysB,EAAY,SAASliB,EAAetK,MGx2FhGwrB,EAAAA,WH02FYK,EAAarlB,KGv2FzBxG,UAAA4C,EAAA,GAAAL,IH02FY+pB,EAAgB9lB,KGv2F5BlI,UAAAyL,EAAAzL,GAAA0L,IH02FYwhB,MGr2FZphB,EAAAA,MAAArN,EAAAwF,YAAA,eAAAqpB,GAAAmB,iBHu2FU,CGn2FVlB,QAAAA,UAAAthB,EAAAxN,eAAA8e,QAAAA,WAAAA,EAAAA,eHu2FY9e,EAAQiN,aAAa4hB,GAEvBC,EGp2FV1uB,KHq2FYiN,QAAS,UGj2FrBG,SAAA3M,EAAAA,WACAb,EAAAA,aHm2FY8uB,EGl2FZS,SAAA/hB,EAAAxN,aAEA8uB,EAAAA,MAAAthB,EAAAxN,EAAAa,OHm2FYU,QAAQnB,QAAQkC,EAAY,gBAAiBwsB,EAAa,KAAKthB,SAASmhB,EAAW3uB,EAAQsuB,OG/1FvGxgB,EAAAtH,YHk2FgBxG,EAAQquB,UG71FxB9sB,EAAA+jB,SAAAtlB,EAAAc,mBHg2FYguB,EG91FZthB,SAAAxN,EAAAa,YHg2Fcb,EAAQquB,UG51FtBQ,EAAA5jB,MAAAA,EAAAA,EAAA,MAIA5C,QAAAymB,QAAAA,OAAA,EACA5P,EAAAA,MAAAA,EAAA/R,EAAAD,EAAAa,GH61FYD,EAAStH,MAAMsoB,EAAc3hB,EAAQD,GAAO/M,KAAK4N,GGt1F7D8gB,EAAA7uB,SAAAquB,EAAApjB,UAAA,EHy1FUwC,EGx1FV+gB,EHy1FU,IAAInmB,GAAKymB,EAAa,EGt1FhC5P,GAAAre,WACA2tB,EAAAA,UAIAyB,EAAAA,SAAAA,EAAAA,YAAAA,SACAnpB,EAAAA,UACA+nB,EAAA9hB,KAAAA,cAAAA,QAGA/M,EAAA+N,WACA9K,EAAAjD,SAAAwF,EAAAA,YAAAqpB,SAAAA,EAAAA,WHs1FUoB,IACAnpB,IGl1FVgoB,EAAAA,WH61FQD,EAAOppB,KAAO,WG/0FtBqpB,EAAAA,WAEAD,EAAAA,MAAAc,EAAAA,YAAAd,eAAAc,GAAAK,mBHk1FczuB,QG50FdyL,UAAAhN,EAAAiO,eAAA1M,QAAAmE,WAAA1F,EAAAiO,eACAH,EAAAA,aAAAghB,GAGAA,EAAAT,KAAAA,cAAA,QAEAI,EAAAA,aAAAA,kBAAAA,GAAAA,aAAAA,EAAAA,cACA3gB,QAAAK,QAAAohB,OAAAA,EH20FYzhB,EAASK,MAAM2gB,EAAclpB,GGx0FzC6H,EAAAxK,MAAAA,GAAAA,KAAAA,GAIAgE,EAAAA,WHy0FYwnB,IGt0FZ3gB,EAAAlI,MAAAA,IAEAipB,EAAAttB,SAAAyL,EAAAhN,UAAA+F,EHw0FU0H,EGv0FV1H,GHw0FUspB,IGt0FVpoB,OA8CA4nB,EAAA9hB,OAAA,WACA+hB,EAAAA,SH+zFYD,EAAOppB,OGvzFnBopB,EAAAqB,QH4zFQrB,EAAO9hB,MAAQ,WACb+hB,EAAa,GAAG/hB,SAElB8hB,EGxzFR7uB,SAAAoE,SAAA6B,GACAuM,KAAAvM,EAAAA,OAAA4oB,EAAA5jB,WHyzFY4jB,EGvzFZsB,OHwzFYlqB,EGvzFZ8I,oBH0zFQ8f,EAAOlc,WGtzFfqc,SAAAD,GHuzFU,GAAI/uB,EGtzFdiG,UACA+oB,IHszFgB/oB,EGtzFhB+oB,QAAAA,CHuzFc,GAAImB,GGtzFlBjB,EAAAjpB,EAAAmqB,SHuzFc,IGtzFdpB,IAAAjiB,EAAAA,CHuzFoB9G,EAAIC,gBAAgBD,EAAIC,iBACxBD,EAAI8I,iBAAiB9I,EAAI8I,iBAC7B,IAAIigB,GAAYD,GACZ9oB,GAAImqB,SACNpB,EAAUA,EAAUtoB,OAAS,GAAGqG,QGnzFlD/M,EAAAquB,GAAAA,WH82FeQ,EAET,QAASphB,GAAWxK,GG5xF1B+L,EAAAA,SAAA/L,EAAAgM,OAAAhM,EAAAgM,MAAA7D,SAAAnI,EAAAiM,UAGAC,QAAAA,GAAAC,EAAAhP,GACA6C,MAAA1B,SAAAnB,SAAAA,GAAAqI,GAAA4G,iBAAAD,IH4+EM,GG14FNihB,GAAA9uB,QAAAC,QACA8uB,EAAArf,EAAAiO,uBAAAjO,EAAAmS,WH24FUoL,EAAcjtB,QAAQnB,QAAQ6Q,EAAQxI,SAASG,MGx4FzD6lB,EAAAG,EAEAF,EAAAG,KAGAa,EAAArkB,KACAsjB,GACA0B,GAAAptB,WAEAqtB,GAAA,WH+qGM,OG1xFNtwB,OH4xFKgP,UG5xFL5O,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GH6xFI,OACE+O,SAAU,MACVlM,OG9xFN1B,EH+xFMyB,KG9xFN,SAAAgK,EAAApL,EAAA5B,EAAA4B,GH+xFQ,GAAI5B,IG3xFZiD,MAAAjD,EACAA,QAAA8e,EH6xFUza,MAAM,EGxxFhB9C,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,aAAAA,OAAAA,UAAAA,SAAAA,GACAL,QAAAyL,UAAAnB,EAAAjK,MAAAA,EAAA6N,GAAAA,EAAA/E,MAIAnJ,EAAAC,aACAxB,EAAA2P,YAAA/N,EAAA2uB,WH0xFQ,IGxxFRvwB,GAAAiD,eHyxFQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KAEvFL,QGtxFRsK,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAjK,GHuxFU,GGtxFViK,GAAAmE,KAAApO,EAAAuR,OAAAlD,GAAAA,cAAAF,EAAAA,MAAAA,EACA9M,SAAArB,UAAAqK,EAAAA,MHuxFYjM,EAAQ4B,GAAOqB,EAAMyM,MAAM7D,EAAK8D,OGjxF5CpO,QAAAsK,SAAA,QAAA,WAAA,SAAAjK,GACAqB,EAAAmN,IACAvE,EAAAtK,SAAAkC,EAAAA,SAAAwM,EAAAF,GACAxO,EAAAA,GAAAQ,EAAAkB,YAAAgN,OHwxFYpE,EGpxFZ2kB,SHqxFUvtB,EAAMmN,OAAOvE,EAAK2kB,QAAS,SAASvgB,EAAUF,GGjxFxD0gB,QAAA5B,SAAA7uB,GAEAA,QAAAoE,OAAAA,EAAA6L,GAEA7P,EAAA2e,QAAAhS,IHmxFa,EG3wFb9J,IAAAA,GAAA4rB,EAAA7uB,EACAA,GAAAywB,WACAzwB,EAAAA,YAAA,WACAywB,EAAA,GAAA1jB,UHgxFQ3M,EAAQiG,GAAGwF,EAAK1H,SAAW,QAASssB,EAAMlqB,QAC1CtD,EAAMsN,IAAI,WAAY,WkBlxG9B9P,GAAAgwB,EAAA3jB,UAIAlM,EAAAG,KACAF,EAAA,YlBqxGEU,QAAQd,OAAO,8BAA+BuD,SAAS,YAAa,WkB9wGtE,GAAA/C,GAAAA,KAAAF,UACAF,UAAAE,cAGA+b,gBAAAvb,EACAA,YAAAC,KlB8wGMkvB,gBkB7wGN1jB,ElB8wGM2jB,eAAe,GkBzwGrBpvB,EAAAC,KAAAP,WAAA,SAAAuK,EAAA9D,EAAAiV,GlBk0GM,QkBrvGNiU,GAAAC,GlBuvGQ,IAAK,GADDD,GAAgB9T,EAAK+T,SAAS1T,QACzBtW,EAAI,EAAGA,EAAI+pB,EAAclqB,OAAQG,IACpCyK,EAAQsf,EAAc/pB,KkBnvGpC+pB,EAAAnvB,GAAAA,EAAAA,GAAAA,GAEAmvB,EAAArT,KAAA9b,EAAAA,SAAAiF,SlBqvGYkqB,EAAc/pB,GAAKiW,EAAK+T,SAASnqB,OAAS,GAIhD,QkBnvGNmqB,GAAA1T,GlBovGQ,GAAI2T,GAAchU,EAAK+T,SAAS1T,OAChC,OAAO2T,GAAYvT,QAAQ9b,QAE7B,QkBlvGNqb,GAAA6T,GlBmvGQ,GkBjvGR7T,GAAA+T,EAAA1T,SAAAK,QAAAD,QAAA9b,ElBkvGY6P,SkB/uGZwL,EAAAA,SAAA+T,QAAA1T,OAAAI,EAAA9b,GlBmvGM,QAASsvB,GAAatvB,GACfqb,EAAKzR,SAASslB,ekB7uG3B1rB,EAAAA,SAAAkY,QAAAK,OAAA,EAAA,GAEAwT,EAAApwB,SAAAA,QAAAA,QAAAA,SACAowB,EAAAA,SAAA/vB,QAAAA,KAAAA,GlB8pGM,GkB3wGN6b,GAAAvb,IlB4wGMub,GkB3wGNA,SAAAzR,QAAAzJ,KAAAhB,GlB4wGMW,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQyL,UAAU2P,EAAO/a,MAAOkb,EAAKzR,SAASzJ,GAAO+a,EAAO/a,KkBxwGxEkb,IAAAA,GAAA+T,eAEA/T,SAAAyE,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEA0P,QAAAA,UAAAtU,EAAA/a,KAAAxB,EAAAA,KAAAA,EAAAA,MACA0c,EAAAoU,SAAA5c,IAAAlU,KlB2wGM0c,EkBxwGNA,YlBywGMA,EAAK+T,YkBtwGX/T,EAAAqU,wBlBwwGMrU,EkBvwGNmU,gBAAAC,SAAA3T,GAEAT,EAAAoU,SAAA1T,KAAAA,IAEAV,EAAAsU,gBAAAA,SAAAhxB,GACA0c,EAAAxL,SAAAwL,KAAA+T,IlBwwGM/T,EkBnwGNqU,kBAAAR,SAAAA,GlBowGQ,GkBlwGRU,GAAAA,EAAAjxB,SAAAA,QAAAA,ElBmwGQ0c,GAAKoU,SAAS1T,OAAOlM,EAAO,IAE9BwL,EkB/vGNA,kBAAAyE,SAAA/f,GlBgwGQ,GkB/vGRmc,GAAAA,EAAAA,SAAAA,QAAAA,ElBgwGQb,GAAK+T,SAASrT,OAAOlM,EAAO,GACxBwL,EAAKzR,SAASslB,ekB5vG1B7T,EAAAK,GAEAmU,EAAA7vB,GlB8vGQqb,EkB7vGRA,qBAAArb,QAAAA,SAAAA,GlB8vGUkc,OAGJb,EkB7vGNiU,SAAAA,QAAAtvB,EAAAA,SAAAA,mBAAAA,GlB8vGMqb,EAAKW,WAAajS,EAAOiS,WAAa,SAAShc,GkB3vGrDqb,QAAAyE,QAAAA,GACA5D,EAAAA,SAAAA,QAAAA,GlB6vGoBb,EAAKzR,SAASkmB,gBAAkBxM,EAAStjB,GACnD4vB,EAAe5vB,GkBzvGzBsvB,EAAA1lB,GlB6vGQyR,EAAKyE,qBAAqB/f,QAAQ,SAASmc,GkB1vGnDA,OlB8vGMb,EkBxvGN0U,eAAA1U,WACA,MAAAA,GAAAjW,SAAAA,cACAyK,EAAAsf,SAAAA,QlB0vGgD,IAAjC9T,EAAK+T,SAAS1T,QAAQzW,OAAeoW,EAAK+T,SAAS1T,QAAQ,OkB1sG1Epc,MAAAkE,KAAA,WACAiO,GAAAA,KlB6uGM,OkB5uGNjS,GAAAA,SAAAL,EACAoC,EAAA/B,WAAAgS,EAEAkL,KlB2uGKnP,UkBxuGLmP,cAAA,UAAA,WAAA,YAAA,SAAAlN,EAAAnD,EAAAkjB,GlByuGI,OACE9d,SkBtuGNiL,WAAAtM,clBuuGM5Q,YAAc,SAAU,WAAY,SAAU+vB,EAAU/vB,YACxD+B,KkBpuGNmb,SAAA9J,EAAAC,EAAAkK,EAAAjK,GlBquGQ,GkBnuGR4J,GAAAuC,EAAAnM,GlBouGYkd,EkBjuGZhU,EAAAlJ,ElBkuGY4J,KACFsT,EkBjuGVb,qBAAAa,KAAAD,WlBkuGYrT,EkBhuGZ5c,cAAAqvB,EAAAY,oBlBkuGUrT,EkB9tGVsT,YAAAhU,KAAAA,SAAAlJ,GlB+tGY,GAAIhT,QAAQmf,QAAQnM,GAClBkd,EkB9tGdb,WAAAA,OACAa,ClB+tGc,GAAIb,GAAgBa,EAAeD,gBAC/BjwB,SAAQmf,QAAQkQ,GkB7tGlCrc,EAAAA,QAAAA,EAAAA,SlB+tGkBkd,EAAehU,WAAwB,EAAblJ,GAEnBqc,IAA+B,EAAbrc,GAC3Bkd,EAAehU,WAAwB,EAAblJ,GkBrtG1CrB,MAAAqB,WlB6tGOvF,UkBhtGPuB,mBAAA,WlBitGI,OACE2C,SAAW,YAAa,eACxBlQ,KkB/sGN0uB,SAAAA,EAAAtxB,EAAAoe,EAAAD,GlBgtGQ,GkB/sGRkT,GAAAnY,EAAA,ElBgtGQlZ,GkB/sGRkR,KAAAA,cAAAqgB,YlBgtGQF,EkB/sGRA,gBAAAngB,GlBgtGQrO,EkB/sGRA,IAAAwd,WAAAA,WlBgtGUgR,EAAeN,kBAAkB/wB,IkB5sG3CA,IAAAA,GAAAsxB,WACAtxB,IAAAA,EAAAkZ,SAAA,CACA,GAAA4W,GAAAA,EAAAyB,kBAAA,uBAAAnT,EAAAmT,iBAAAnT,EAAAmT,iBAAAF,EAAAP,SAAA3T,QAAAnd,EACAsxB,GAAAA,WAAAA,EAAAA,GACA5T,EAAA5X,UlBitGQ9F,GAAQiG,GAAG,QAASqrB,GACpBtxB,EAAQ8kB,KAAK,mBAAoB,SAASpH,GACxB,KAAZA,EAAEoS,OACJwB,IkB1sGZ1iB,EAAAA,kBAEA,KAAA8O,EAAAoS,OAAA,IAAApS,EAAAoS,OACAhd,EAAAA,uBlB+sGKlE,UkBnsGL5O,oBAAAqxB,WAAApmB,SAAAxK,GlBosGI,OACEqS,SkBjsGNue,YAAAG,elBksGM5uB,KkB/rGNC,SAAAA,EAAA7C,EAAAoe,EAAAD,GlBysGQ,QAASM,KACP,GAAIvN,GkB9rGdA,EAAAW,SAAAsL,QAAAnd,GACAyxB,EAAAJ,EAAAD,iBlB+rGcK,EAAS,akB5rGvB/jB,SAAA+jB,QAAAzxB,GlB8rGgB6R,EAAOsL,QAAQjM,UkB3rG/BmgB,EAAAlQ,YlB8rGqBjQ,IAAUW,IkB3rG/B4M,EAAAA,YlB8rGU/Q,EAAS+jB,GAAQzxB,EAASqxB,EAAepmB,SAASqR,aApBpD,GkB/rGR+U,GAAAL,EAAAA,ElBgsGQhxB,GAAQoN,SAAS,YkB7rGzBikB,EAAA5S,SAAAA,WACAze,EAAAkR,SAAAmgB,EAAAZ,SAAAtT,WlBgsGQkU,EkB9rGRG,gBAAAxxB,GlB+rGQ6C,EkB9rGR1B,IAAAA,WAAA0Q,WlB+rGUwf,EkB9rGVlU,kBAAAnd,KCnQAmB,EAAAggB,qBAAAjN,KAAA,WAIA1T,MAEAf,SnBi9GE0B,QmB78GF4C,OAAA,2BAAA,2BAAAH,SAAA,YAAA,WnB88GI,GmB78GJ2I,GAAA5L,KAAAH,UACAwD,UAAA,UACAzB,YAAA,WACA6B,YAAA,WnB88GMP,UAAW,cmB38GjBlD,YAAA,6BAEAoD,QAAA2d,QACAnV,WAAAmlB,EAEA1tB,UAAA2tB,EnB28GMpvB,MmBz8GNqvB,EnB08GMxtB,MmBv8GNxE,EnBy8GIe,MmBr8GJixB,MAAAA,UAAA5xB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GnBw8GM,QmBl8GN+xB,GAAAvf,EAAAlH,GnB++GQ,QAAS2mB,GAAYhsB,GmBz6G7B+I,GAAAA,EAAAjL,SAAA3D,EAAA,GAEA,MAAA6F,GAAAlC,SAAA3D,EAAA,IAAA4xB,EAAAvsB,OnB23GQ,GmBl8GRusB,MACAhyB,EAAAuB,QAAAQ,UAAAnB,EAAA0K,EnBm8GQ0mB,GAAUxmB,OAASxL,EAAQiD,OAASjD,EAAQiD,MAAMwI,QAAUC,EAAWD,OACvEumB,EmBl8GR7sB,EAAAuF,EAAA8H,EnBm8GQ,ImBl8GRvM,GAAAC,EAAAA,QnBm8GQ8rB,GmBl8GRjjB,WAAAA,SAAAA,GAGA,GAAAmjB,MAAAA,KAAA3wB,EAAAA,SAEA,WADAywB,GAAAtrB,MnBm8GU,ImBh8GV,UAAAorB,KAAAA,EAAAA,SnBg8GU,CACA7rB,EAAIC,iBmB77GdD,EAAAA,iBAGAisB,IAAAA,GAAA5gB,QAAAvE,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA;AnB67GU,GAAKmlB,EAAMxrB,OAAX,CmBv7GV,GAAArC,EACA2tB,SAAA3tB,QAAA6tB,EAAA,SAAA7pB,EAAAxB,GACAxC,GAAAA,EAAAA,KAAAA,EAAAA,YAAAA,EAAAA,KAIAD,KAAA6B,EAAAjG,SAAAgyB,EAAAA,EAAAtqB,IAAA,KAAAsqB,EAAAtqB,SAAA4J,EAAA0gB,EAAArf,OAAAA,EAAAA,IAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GnBu7GUuf,EmBt7GVpQ,GAAAzb,GAAA,GAAA0G,UnBw7GQ,ImBt7GR1I,GAAA8tB,EAAA/M,InBu7GQ4M,GAAU3tB,KAAO,WmBp7GzBA,IACA2tB,EAAAvsB,WACAusB,EAAAA,UAAAA,EAAAtqB,UAAAsqB,EAAAtqB,SAAArB,GAAA,UAAA2rB,EAAArf,YACAmP,EAAA9hB,GAAAoE,QAAAA,IACA0d,GAAAA,GACAqQ,EAAA/M,SAAA,aAAA+M,EAAAxjB,SAAAA,QnBu7GQ,IAAIlJ,GAAOusB,EAAUvsB,ImBn7G7BusB,GAAAllB,KAAAklB,WACAA,EAAAllB,WACAgV,EAAA1d,UAAA6tB,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,YACAnlB,EAAAA,IAAAA,QAAAA,GnBq7GcqlB,EAAS/M,SAAS,aAAa+M,EAASxjB,YAAY,QmBh7GlElJ,KnBm7GQ,ImBj7GRqH,GAAA/I,EAAA3D,OAiBA6C,OnBi6GQ+uB,GAAUllB,QAAU,WmB/6G5BgV,EAAAkQ,IAAAA,QAAAA,GnBi7GUllB,KmBn6GVklB,EnBs3GM,GmBr8GNlQ,GAAAqQ,QAAA/xB,QAAA+M,EAAAA,SAAAA,MAIA6kB,EAAArf,QAAA+V,UAAAziB,iBAAAA,QAAAA,UAAAA,uBAAAA,QAAAA,UAAAA,oBAAAA,QAAAA,UAAAA,mBAAAA,QAAAA,UAAAA,gBnBs/GM,OmBt6GNmsB,OnBw6GKpjB,UmBt6GL,cAAAqjB,UAAAA,OAAAC,YAAA,SAAArhB,EAAAjF,EAAAgmB,GnBu6GI,OACE7iB,SAAU,MACVlM,OmBt6GN,EnBu6GMjC,QmBt6GNoxB,SAAA7xB,EAAA8xB,GnBu6GQ,ImBt6GRD,EAAAryB,WAAAA,CnBw6GU,IADA,GmBt6GVsyB,GAAAE,EAAAC,GAAAA,YnBu6GiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WmBj6GtCryB,IAAAA,EAAAA,UAAAA,MAAAA,KAAAA,QAAAA,kBAAAA,IACAiD,EAAAA,SAAAA,EAAAA,UnBo6GYmvB,EAAOryB,YAAcD,EmBl6GjCyB,EAAAC,WAAAgxB,YAAAH,InBs6GQ,MmBj6GR5iB,UAAAxM,EAAA7C,EAAAyL,GACAtK,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,YAAAA,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,KAAAA,aAAAA,SAAAA,GACA+N,QAAA3C,UAAApL,EAAAuR,MAAAC,EAAAA,GAAAxR,EAAAiO,KnBi6GU,ImB/5GV7P,GAAAiD,enBg6GU1B,SAAQC,SAAU,OAAQ,aAAe,SAASI,GAC5CL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KAEvFL,QmB75GV6O,SAAAvE,eAAA,SAAAoE,eAAAF,UAAAA,SAAAA,GnB85GY,GmB75GZ9M,GAAA8b,KAAA9O,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EACA1O,SAAAyL,UAAAnB,EAAA8D,MnB85Gc3P,EAAQ4B,GAAOqB,EAAMyM,MAAM7D,EAAK8D,OmBt5G9C1M,EAAAmN,YnB05GYnN,EmBz5GZmN,OAAAqiB,EAAAA,WAAAzlB,SAAAiD,EAAAF,GACA9M,EAAA1B,QAAAG,IACA,EnB25GU,IAAI+wB,GmBz5GdT,EAAA5xB,EAAAJ,EnB05Gc6L,GmBz5Gd4mB,QnB05GYxvB,EAAMmN,OAAOvE,EAAKsE,OAAQ,SAASF,EAAUF,GACtC0iB,GAAalxB,QAAQyL,UAAUiD,KAChC1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,yBmBt5G1EE,KAAA,EACAkiB,EAAAA,OAEAA,EAAAhtB,UnB25GUxC,EAAMsN,IAAI,WAAY,WAChBkiB,GAAUA,EAAS3lB,UoB/kHnCrM,EAAA,KAOAG,EAAAG,apBglHEQ,QoBxkHFoL,OAAA,6BAAA,oCAAA,uCAAA,2BAAA3I,SAAA,cAAA,WpBykHI,GoBxkHJI,GAAArD,KAAAH,UACA+B,UAAA,UACA6B,YAAA,aAEAwQ,UAAA,cACA0d,YAAA,iCACAC,QAAAA,QACAxd,WAAA,EACAyd,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACA7d,gBAAA,KACA8d,UAAA3d,KACA4d,YAAA5d,MACA6d,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAAle,EAAAA,GACAme,UAAAne,EAAAA,GACAoe,UAAA,EpBwkHMN,QAAS,EoBrkHfvyB,UAAAkE,EAEAuuB,mBAAA,GACAC,UAAAntB,EACAotB,UAAA9yB,EAEA+yB,SAAAE,mCpBqkHMD,UoBnkHNE,oCpBqkHI/yB,MoBnkHJkE,MAAAjF,UAAA8zB,YAAAzoB,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GpBukHM,QoBhkHNyoB,GAAAC,EAAAC,EAAAA,GAqKAF,QAAAA,GAAAzrB,GACAA,EAAAmM,SAAAlF,EAAA0F,YAAA3M,EAAAkP,MpBwiHQ,QoBtiHRnX,KpBuiHUA,EoBtiHV,GAAA2M,QAxKA,GAAAqJ,GAAA2d,EAAA3d,EAAAA,QAAAA,UAAAA,EAAAA,IACAnT,EAAAjD,EAAAqzB,MACApwB,EAAAgxB,EAAAN,SACA1wB,EAAAixB,EAAAl0B,MACAiD,GAAAkxB,YAAAn0B,EAAAyzB,WAAAA,EAAAA,QACAxwB,IAAAA,GAAAjD,EAAA0zB,EACAI,GAAAM,OAAAN,EAAA7wB,KAIAA,IAAAA,GAAAsO,EAAAgG,QpB8jHQtU,GoB7jHRqW,MAAAA,EAAA+Z,UpB8jHQpwB,EoB7jHR6wB,UAAAziB,EAAAkG,SpB8jHQtU,EAAMixB,WAAal0B,EAAQ4zB,UoB5jHnC3wB,EAAAoxB,UAAAA,EAAAZ,SpB8jHQxwB,EoB7jHR6wB,UAAAO,EAAA5yB,QpB8jHQ,IAAI2yB,GAAUN,EAAYQ,OAAOrxB,EAAMsxB,MoB5jH/CtxB,GAAAuxB,QAAAA,SAAAjd,EAAA+B,GACAwa,GpB8jHUA,EAAYziB,OAAOkG,IAErBtU,EoB7jHRjD,YAAAqV,SAAA5T,GpB8jHUqyB,EoB7jHVA,YAAAryB,IpB+jHQwB,EAAMuxB,YoB7jHd,WpB8jHUV,EoB7jHVA,SAAA7wB,EAAA8V,MAAA,GAAA+a,EAAAQ,OAAA5tB,SpB+jHQzD,EAAMwxB,UAAY,WoB5jH1BC,EAAAA,WACAZ,EAAAze,QAAAA,GACAye,EAAAa,OAAAA,GAAA5b,QpB+jHY+a,EoB7jHZziB,OAAA,GAAA0H,OAAA,IpBgkHQ9V,EAAMyxB,OAAS,WoBzjHvBZ,EAAApiB,WAEAoiB,EAAArb,QAAAlB,GACAuc,EAAAta,OAAAA,OpB2jHYsa,EAAYziB,OAAO,MAAM,IoBpjHrCyiB,EAAAc,OAAAA,SAAAA,GACA50B,QAAA60B,OAAAA,KAAAC,MAAAA,EAAAA,aACAhB,EAAAta,MAAAvW,EACA1B,EAAAC,OAAAA,KAAAyB,EAAA4D,IpByjHUitB,EAAYlb,QAAO,IAErBkb,EoBrjHRvyB,oBAAA,SAAAuzB,GpBsjHU90B,EoBrjHVuB,mBAAAN,CpBsjHU,KoBrjHVA,GAAAA,GAAAA,EAAA4W,EAAAA,EAAAA,KAAAnR,OAAA6Q,EAAAA,EAAAA,IpBsjHYhW,QAAQC,QAAQyB,EAAMyW,KAAK7S,GAAIitB,EAAYiB,iBAG/CjB,EAAYziB,OAAS,SAASkG,EAAMuB,GoBpjH5CvX,QAAAgzB,OAAAA,GACAtzB,QAAA4Q,OAAAA,EAAAtQ,cAAAgW,MAAAA,EAAAA,WAAAA,aACAtW,EAAA0Q,WAAAA,GAAAA,MAAAA,IpBwjHY1Q,EoBtjHZ6yB,WAAA,MpBwjHe7wB,EAAMsxB,OAASzb,GAClB7X,EoBvjHZ4Q,cAAAtQ,QAAA4X,KAAA5B,IACAhW,EAAAQ,UAAAumB,EAAA/Q,YAAA4R,GAAAD,EAAA3R,WAAAA,EAAAkW,MAAAA,OpB8jHYlsB,QAAQQ,OAAOqU,GACbkS,KAAM/Q,EAAK4R,coBzjHzB2K,MAAAa,EAAAA,WAEA1xB,KAAAsxB,EAAAS,YAEAlB,EAAAlb,QAAAA,EAAAA,MAAAA,GpB0jHYkb,EAAYlb,WAGhBkb,EoBrjHRmB,QAAA,SAAAb,GACAA,EAAAA,MAAA1M,EpBsjHU0M,EAAUN,EAAYQ,OAAOrxB,EAAMsxB,OoBnjH7CT,EAAAoB,UpBsjHQpB,EoBpjHRtyB,OAAAyB,SAAAyW,GpBqjHcub,KAAa,GAAQb,EAAQe,QAC7BF,KAAa,GAAUb,EAAQe,QoBljH7CrB,EAAAA,MAAAja,KAAAA,IpBqjHQia,EAAYoB,gBAAkB,WoBjjHtCpB,IAAAA,GAAAA,GAAAiB,EAAAA,EAAAA,EAAAA,KAAAruB,OAAA2B,EAAAA,EAAAA,IACAA,QAAAiR,QAAA8a,EAAAgB,KAAAA,GAAA/sB,IpBqjHQyrB,EoBjjHRuB,YAAAA,SAAAA,GAIA,MAAAnb,GAAAA,WAAAnB,IpBgjHQ+a,EoB/iHR5Z,eAAAob,SAAAA,GpBgjHUjtB,EoBhjHV6gB,SAAAhP,EAAAqb,WAAAA,EAAAA,OpBkjHQzB,EAAYO,YAAc,SAAS5yB,GoBjjH3CqyB,GAAAA,GAAAlb,EAAAA,MpBmjHcsB,EAAa,GAAInB,MAAKA,KAAKyc,IAAIpf,EAASkS,MAAQ+M,EAAM/M,MAAQ,GAAK7mB,EAAO2U,EAAS8S,OAASmM,EAAMnM,OAAS,GAAKznB,EAAO,GoBhjHrIqyB,SAAAA,OAAA/hB,GAEA9L,KAAAC,EAAAA,iBACAD,MAAA8I,EAAAA,cAEAwI,KAAAjR,EAAAmvB,epBijHU3B,EoB/iHV3Z,UpBijHQ2Z,EAAY/hB,aAAe,SAAS9L,GAGlC,GAFAA,EoB/iHVkU,iBpBgjHUlU,EAAI8I,kBACAzI,EAAS,CoB7iHvBwtB,GAAAA,GAAAnhB,QAAAvS,QAAA6F,EAAAA,OACAA,YAAAkU,EAAA,GAAA/T,SAAAsE,gBACAxE,EAAAA,EAAAA,UAGAiU,EAAA3H,eAAA,WpBgjHQshB,EoB7iHRnhB,WAAA,SAAA1M,GpB8iHU,GoB7iHVhD,mBAAAyH,KAAAzE,EAAAuM,WAAAvM,EAAAmqB,WAAAnqB,EAAAyvB,OpB6iHU,CAGA,GAFAzvB,EAAIC,iBACJD,EAAI8I,kBACgB,KAAhB9I,EAAIuM,QAQN,YoBtjHZvP,EAAAsxB,MAKAxjB,EAAAA,OAAA7B,WpB8iHgB4kB,EAAYa,QAAQ1xB,EAAMsxB,MAAQ,KAHpCT,EAAYruB,MAAK,GoBjiH/BrF,GAAAu1B,UAAA5oB,GpB0iHUgE,EAAY7B,WAQd,IoBtiHR9O,GAAAyI,EAAA6D,IpBuiHQonB,GoBtiHRjoB,KAAA,WpBuiHU,MoBtiHVzL,IAAAJ,EAAAgX,WpBuiHY5W,EAAQyI,KAAK,OAAQ,YoBriHjCoO,GAAAA,IAAAA,qBAAAA,eAGAgE,IACA6Y,EAAAhnB,KAAAA,OAAA,QACA1M,EAAAkP,KAAAA,WAAA0F,QACA5U,EAAAwG,GAAAA,QAAAoQ,QAEAiE,MAGA,IAAAC,GAAA4Y,EAAAzvB,OACAyvB,GAAAzvB,QAAA,WACAiL,GAAAlP,EAAAyL,WACAqP,EAAAA,IAAAA,QAAAA,GpBsiHUD,IAEF,IoBjiHRC,GAAAlb,EAAAoE,IpBkiHQ0vB,GoBjiHR1zB,KAAA,YpBkiHekG,GAAWlG,EAAQyL,KAAK,aAAezL,EAAQyL,KAAK,cACzDqP,IACA9T,EAAS,WoB/hHnB+T,EAAA2Y,WACAA,EAAAruB,SAAAY,GAAA6H,EAAAA,aAAAA,YAAAA,EAAAA,cACA4lB,EAAAA,UACAA,EAAApsB,GAAAA,UAAApB,EAAAqM,cAEAvS,GAAAA,IpBkiHQ,IoBhiHR+a,GAAAjN,EAAAA,IAmBA,OpB8gHQ4lB,GAAYruB,KAAO,SAASyI,GoB9hHpC4lB,EAAAA,WpBgiHUA,EAAYpsB,SAASd,IAAIN,EAAU,aAAe,YAAawtB,EAAY/hB,coB5hHrF8hB,EAAAA,UACAzzB,EAAAyzB,IAAAA,UAAAA,EAAAA,YAMA7kB,EAAAd,KAKA4lB,EpBy1GM,GoBnkHNxkB,GAAAwkB,6BAAAtoB,KAAAA,EAAAA,UAAAA,WACAlF,EAAA+sB,eAAArzB,GAAAqzB,UAAArzB,CA4OAgD,OAxOApC,GAAAmzB,OAAA6B,EAAAA,KAAA9B,EAAAA,oBAuOA5gB,EAAAtS,SAAAA,EACAizB,MpBwhHK7kB,UoBrhHL/L,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GpBshHI,GAAIqM,GAAW,6BAA6B5E,KAAKuG,EAAQmK,UAAUC,UACnE,QACElM,SoBthHN5N,MpBuhHM2R,QAAS,UACTlQ,KoBphHNyM,SAAAA,EAAArP,EAAAyL,EAAA5K,GpB+kHQ,QoBjgHR40B,GAAAC,GpBkgHU,MoBhgHVC,IAAAC,EAAAtvB,OACAuvB,EADA,KpB4gHQ,QoB//GRh1B,GAAAqa,GAEA,GAAAE,QAAAva,OAAAA,GAAA,CpB+/GU,GAAIwa,GAAarS,MAAM6sB,EAAW5qB,SAAS8nB,UAAY+C,EAAWvd,WAAasd,EAAW5qB,SAAS8nB,QoB3/G7GlyB,EAAA2a,MAAAC,EAAAxQ,SAAAyQ,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEAvE,EAAAA,GAAAA,CAEAtW,GAAA6a,aAAA,OAAAN,GpB2/GUva,EoB1/GVA,aAAAya,MAAAD,GpB2/GUxa,EoBv/GVya,aAAA,MAAAJ,GpBw/GcE,IAASva,EAAW4W,WAAaqe,IAmDvC,QAASC,KACP,OAAQl1B,EAAW4W,YAAczO,MAAMnI,EAAW4W,WAAWc,WAAa,GAAKzC,EAAWjV,EAAW4W,WAAY7X,EAAQ2yB,YoBvpHnIpxB,GAAAA,IACA0B,MAAA1B,EpBshHQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,cAAe,WAAY,YAAc,SAASI,GACxaL,QAAQyL,UAAUnB,EAAKjK,MAAO5B,EAAQ4B,GAAOiK,EAAKjK,KAExD,IoBlhHR6N,GAAA7N,epBmhHQL,SoBlhHRA,SAAAyL,OAAAnB,YAAA,YAAA,YAAA,WAAA,YAAA,SAAAjK,GACA5B,QAAA4B,UAAAqB,EAAAyM,KAAAC,EAAAA,KAAAA,EAAAA,MpBmhHY3P,EAAQ4B,IAAO,KoB7gH3B5B,QAAAA,SAAAi2B,eAAA5qB,SAAAA,eAAAA,UAAAA,SAAAA,GAEA,GAAAiE,GAAAA,KAAAtP,EAAAgV,OAAAA,GAAAhV,cAAA2yB,EAAAA,MAAA,EAEAtb,SAAArX,UAAAqX,EAAAA,MAEAnB,EAAAA,GAAAjT,EAAAyM,MAAA6H,EAAApB,MAIA,IAAA8F,GAAAC,EAAAA,EAAAA,EAAAA,EpB6gHQlc,GoB7gHRA,EAAA2yB,SAAAtb,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,apB+gHQ,IoB/gHR2R,GAAAhpB,EAAAkzB,KpBghHYhd,EAAa,SAASqB,EAAMpB,GoB7gHxC,MAAAhG,GAAA+F,WAAAqB,EAAApB,EAAAkB,IAEA4E,EAAAga,GpB+gHU9f,OoB9gHV5U,EAAAG,WpB+gHU2V,KoB9gHVpH,EpB+gHU+Y,OoB9gHViN,EAAA5xB,cpBghHYwH,GoB9gHZoqB,QpB+gHUhzB,EAAMmN,OAAOvE,EAAKsE,OAAQ,SAASF,EAAUF,GACtCkmB,GAAe10B,QAAQyL,UAAUiD,KAClC1O,QAAQG,SAASuO,KAAWA,IAAaA,EAASI,MAAM,2BoB3gHxE7O,KAAA,EAEAD,EAAAyL,OAGAipB,EAAA5qB,UpB8gHQ9J,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQyL,UAAUnB,EAAKjK,KoBtgHrCL,EAAAA,SAAAyL,EAAAnB,SAAA8mB,GACA9mB,EAAAR,SAAAzJ,GAAAqa,EAAAhM,oBAAAA,EAAAA,GACAgmB,MAAA5qB,EAAAsnB,SAAA1iB,KAAAA,EAAAA,QAAAA,GpBwgHcmmB,EAA0Bn1B,EAAW4W,gBoBjgHnDtW,QAAAyL,UAAAnB,EAAA8mB,aAIA9mB,EAAAmE,SAAA8lB,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAA9lB,IAIAhN,EAAA1B,OAAAyL,EAAAA,QAAAqpB,SAAAA,EAAAtmB,GACA9M,EAAAmN,OAAAimB,EAAAA,cpBkgHW,GAKC90B,QAAQyL,UAAUnB,EAAKwqB,gBACzBpzB,EAAMmN,OAAOvE,EAAKwqB,cAAe,SAASL,EAAgBH,GoB9/GpEG,EAAAI,EAAAF,GACAL,EAAApd,EAAAod,GACApa,GACAH,EAAAA,oBAAAjQ,KpB6gHQpK,EoBv/GRi1B,SAAAA,QAAAA,SAAAA,GpBw/GU,GoBv/GVj1B,EpBw/GU,KoBr/GV6a,EAEAsa,MpBo/GYn1B,GAAWya,aAAa,QAAQ,GoBp/G5C0a,IpBu/GU,IoBp/GV7e,GAAA0E,EAAAG,MAAAA,EAAA8Z,EAAAl2B,WpBq/GU,QoBp/GVk2B,GAAAhgB,MAAAqB,EAAAqb,epBq/GY3xB,GAAWya,aAAa,QAAQ,IAGlC0a,EoBp/GVzd,GACA+Z,WpBo/Gc1yB,EoBp/GdA,UACAuX,EAAAA,EAAAoB,qBAAAud,EAAAl2B,EAAAmV,UAAA,GACAe,EAAAwc,EAAAA,EAAAE,iBAAA5yB,EAAA2yB,cpBs/GUpb,EAAO0E,EAAWG,qBAAqBnb,EAAW4W,WAAY7X,EAAQmV,UAAU,GoBn/G1FoC,WAAAvX,EAAA+Y,SpBq/GmBxB,EAAKoB,UoBj/GxB,SAAAtE,EAAAA,SAEAkD,EAAAA,UAAAA,IACAhD,QAAAhT,EAAAmR,SACA2J,EAAAA,cAEA9E,GAAAhD,MAAAA,OpBm/GQtT,EoBj/GRgb,YAAAK,KAAA/H,SAAAA,GpBk/GU,GAAIgD,EAiBJ,OAfEA,GoBl/GZA,QAAA7E,YAAA6B,IAAA,OAAAA,EACA8H,IACA9a,QAAAgT,OAAAA,GpBk/GmBA,EoB1+GnB,WAAAvU,EAAAmV,SACAlU,EAAA4W,MAAAN,EAAAA,KAAAA,EAAAA,iBACA,SAAAvX,EAAA0yB,SACAzxB,GAAA4W,MAAAoE,IAAApE,GAEAse,GAAAA,MAAAA,GAIA,QAAAl1B,EAAA0Q,SAEAvR,EAAA+1B,WAAAA,EAGAl1B,EAAAk1B,WAAAA,EAAAA,qBAAAA,EAAAA,EAAAA,UpBy+GiBA,MAETl1B,EoBr+GRg1B,QAAAA,WACAj2B,EAAAA,IAAAm2B,MASAnyB,EAAAA,IAAA,WAAA,WAQAqB,GAAAipB,EAAAA,UACAgI,EAAAA,KACAL,EAAAvvB,YpB89GO1C,SAAS,kBAAmB,WoBv9GnC,QAAAuyB,GAAAC,EAAA9K,GpB09GM,IoBz9GN,GAAA4K,MpBy9GaG,EAAI/vB,OAAS,GoBt9G1B3F,EAAAkE,KAAAwxB,EAAAjZ,OAAA,EAAA8Q,GpBy9GM,OoBr9GNrrB,GpBu9GI,QoBp9GJoU,GAAAA,EAAArX,GpBq9GM,OoBp9GNkW,EAAAA,EAAAA,GAAAwV,EpBs9GI3qB,KAAKkE,MAAS,iBAAkB,cAAe,OAAQ,SAAS8S,EAAgBmE,EAAalQ,GAC3F,MoBp9GNiQ,UAAAA,GpBq9GQ,GoBr9GR9F,GAAAnW,EAAA2yB,OAAAtb,EAAAA,EAAAA,SAAA2R,EAAAhpB,EAAAkzB,KpBw9GYhd,EAAa,SAASqB,EAAMpB,GoBt9GxC,MAAAugB,GAAA3e,WAAAmW,EAAAA,EAAA7W,IAEAsf,EAAAA,GAEAxgB,OAAAG,EAAAsgB,WACAvf,KAAAjB,EAAAkS,OAAAhS,EAAA6S,eAAA5R,EAAAkW,EAAAA,cAAAA,GpB09GYoJ,EAAiBH,EAAY7mB,MAAM7P,EAAQuzB,WAAWuD,OAAOJ,EAAY7mB,MAAM,EAAG7P,EAAQuzB,YoBx9GtGS,EAAAA,EAAAA,YAAAA,+BAAAA,EAAAA,KAAAA,qCAAAA,SACA7d,EAAAnW,EAAA6yB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACAxtB,GACAgwB,KAAAA,EAAAA,cpB09GUnM,MoB19GVA,EAAAE,WpB29GU7R,KAAMjB,EAAUmX,WoBz9G1BuG,IpB49GU7d,OoB39GV5U,EAAAQ,UpB49GUsD,MoB59GVijB,EpB69GU+M,OACEnM,MoB99GZ3R,GpBg+GU7F,OoB/9GVklB,SAAAhe,EAAAA,IpBg+GiB7X,KoB/9GjBo0B,OAAA1H,GAAAA,EAAArX,gBAAAmB,EAAAkW,MAAAlW,EAAA6R,aAAAhT,EAAA8S,OAKA9S,QAAAA,OAAAmB,GACAqf,KAAA1B,EAAAA,MAAAA,cpB49GgBhM,MAAO0N,EAAOpd,MAAM4P,WACpB7R,KAAMqf,EAAOpd,MAAMiU,YoBz9GnCmJ,EAAAG,UACAC,EAAAA,YAAAD,EAAAA,MAAAhJ,IAAAA,EAAAA,YACA3X,EAAA6gB,KAAAL,EAAA7d,MAAAge,UACAH,EAAAM,oBpB89GUC,MoB19GVC,WACA,GAAAnO,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACA+N,EAAAnwB,EAAAknB,oBACA9E,EAAAhN,GAAA4R,OAAAA,EAAAoJ,MAAAle,EAAAA,EAAAoQ,SAAA8N,EAAAA,UAAA7N,IACAgO,EAAA9iB,EAAAA,oBAAAiD,EAAA0R,EAAAA,qBAAAA,GAAAA,MAAAA,EAAAA,UAAAA,cAAAoO,KAAAC,IAAA3J,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IpB+9GY,KoB/9GZ4J,GAAA/iB,GAAAO,KAAAwiB,EAAAtO,EAAAG,EAAAA,GAAAA,IpBg+GcH,EoBh+Gd3P,EAAA8b,qBAAAnM,GAAAA,MAAAA,EAAAA,cAAAA,EAAAA,WAAAA,EAAAA,UAAAA,IpBi+GcmO,EAAK9iB,MACHiD,KAAM0R,EoBh+GtBhmB,QAAAqB,EAAA4R,iBAAA6gB,EACA9zB,MAAAu0B,EAAAvO,EAAAloB,KAAAoV,QACAlT,SAAAw0B,EAAAd,OAAAA,KAAAA,WAAAA,GACA1zB,MAAAyW,EAAArU,aAAAA,EAAAA,MACApC,SAAAy0B,KAAAA,WAAAtC,IAGAuC,GAAAA,MAAAzhB,EAAAqB,EAAAA,EAAAA,kBACAtU,EAAAu0B,YAAAhe,EpBk+GYvW,EAAMw0B,OAASd,EoBh+G3BvB,EAAAA,KAAA/vB,EAAAkS,EAAAA,KAAAA,OACAtU,EAAAkU,gBAAAwB,KAAAA,WAAAA,GAAAA,OAGA5X,KAAAoW,OAAAnX,GpBi+GU23B,WoB39GV33B,SAAA60B,GpB49GY,MoB39GZ+B,GAAA/vB,OAAA7G,EAAAA,gBAAA60B,EAAAnuB,MAAAG,eAAA0Q,EAAA6R,aAAAwN,EAAApd,MAAA4P,YAAA7R,EAAAkW,YAAAmJ,EAAApd,MAAAiU,WpB69GU2H,WoB39GV,SAAA7d,GpB49GY,GAAIJ,GAAOI,EAAKoB,SAChB,IAAIxB,EAAOnX,EAAQmzB,SAAWhc,EAAOnX,EAAQozB,QAAS,OAAO,CAC7D,IAAIpzB,EAAQwzB,mBAAmBjW,QAAQhG,EAAKqgB,eAAkB,OAAO,CoBz9GjF,IAAA53B,EAAA60B,mBpB29Gc,IAAK,GAAIhuB,GAAI,EAAGA,EAAI7G,EAAQ60B,mBAAmBnuB,OAAQG,IoBz9GrE8uB,GAAAA,GAAA31B,EAAAiG,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACA2wB,OAAApd,CAIA,QAAAS,GpB49GU0b,UoBr9GV50B,SAAAq0B,GpBs9GY,GAAKwB,EAAOpd,MAAZ,CoBl9GZrD,GACA9Q,GADA8Q,EAAA2c,EAAAA,MAAAA,SAEAuC,MAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,UAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAA/M,KAAA8M,WAAAnb,IAAA2c,EAAAvlB,OAAA4I,GAAA,OpBy9GUyD,KoBv9GV,QpBw9GUvH,OoBv9GV5U,EAAAQ,YpBw9GUsD,MoBx9GVijB,EpBy9GU+M,OACE/M,KoB19GZ/Q,GpB49GU7F,OoB39GVklB,SAAAhe,EAAAA,GpB49GiB7X,KoB39GjBo0B,OAAA/L,EAAAA,gBAAAF,EAAAZ,KpBk+GuB/Q,EAAK6R,aAAehT,EAAS8S,QoB79GpDiO,QAAAp1B,OAAAqU,GAEAyhB,MAAAA,EAAAA,MAAAA,WACA3O,KAAAA,EAAAA,MAAAA,YAEAA,EAAAA,oBATA3nB,QAAAQ,OAAAqU,GAAA8S,KAAAA,EAAA0N,MAAApd,cAAAjC,MAAAqf,EAAApd,MAAAiU,WpB89GgBlW,KAAMqf,EAAOpd,MAAMiU,YAErBmJ,EAAOhe,WASXue,MoB/9GVpiB,WpBk+GY,IAAK,GoBl+GjBuE,GAAA9E,KpBk+GqB3N,EAAI,EAAGA,EAAI,GAAIA,IACtBqiB,EAAQ,GAAInQ,MAAK3C,EAASkS,KAAMzhB,EAAG,GoBj+GjD5D,EAAAqB,MACArB,KAAAu0B,EACAv0B,MAAAyW,EAAAme,EAAA92B,KAAAsE,QACAtE,SAAA61B,EAAA/c,YAAAqP,GpBm+GgB5P,SAAUvY,KAAKq0B,WAAWlM,IAG9BjmB,GAAMqB,MAAQ4R,EAAWgT,EAAOlpB,EAAQizB,iBoBj+GpDmC,EAAAA,YAAA7d,EACAtU,EAAA60B,KAAAA,EAAAD,EAAAtgB,KAAA4R,OACApoB,KAAAo0B,OAAA2C,GAEAnC,WAAA,SAAA1vB,GACA,MAAA2wB,GAAApd,OAAAjC,EAAA4R,gBAAAyN,EAAApd,MAAA2P,eAAA5R,EAAA6R,aAAAwN,EAAApd,MAAA4P,YpBo+GUgM,WAAY,SAAS7d,GoBj+G/B,GAAAwgB,IAAAA,GAAAnB,MAAApd,EAAAA,cAAA4P,EAAAA,WAAAA,EAAAA,EACA,OAAAnP,GAAAlB,EAAA6d,SAAApd,EAAAA,UAAAA,EAAAA,SpBo+GUmc,UoB79GV50B,SAAAq0B,GpB89GY,GAAKwB,EAAOpd,MAAZ,CoB19GZrD,GAAAA,GAAA4c,EAAAA,MAAAA,WACA1tB,EAAA,GAAA0T,MAAA6d,EAAApd,MACA6b,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GAAA/M,KAAA8M,WAAAnb,IAAA2c,EAAAvlB,OAAA4I,GAAA,OpBi+GUyD,KoB/9GV,OpBg+GUvH,OoB/9GV5U,EAAAQ,WpBg+GUsD,MoBh+GVijB,EpBi+GU+M,OACE/M,KoBl+GZ/Q,IpBo+GU7F,OoBn+GVklB,SAAAhe,EAAAA,IpBo+GiB7X,KoBn+GjBo0B,OAAAhM,GAAAA,SAAA/S,EAAAA,cAAA,GAAA,MAAA7M,SAAA6M,EAAAkS,KAAA,GAAA,KACA/mB,QAAAQ,OAAAqU,GAAAkS,KAAAsO,EAAApd,MAAA2P,cAAAD,MAAA0N,EAAApd,MAAA4P,WAAA7R,KAAAqf,EAAApd,MAAAiU,YACAmJ,EAAA1B,UpBw+GuB3d,EAAK4R,gBAAkB/S,EAASkS,OACzC/mB,QAAQQ,OAAOqU,GoBt+G7B+gB,KAAAP,EAAApd,MAAA2P,cACA6O,MAAAA,EAAA5hB,MAAAA,WACA6hB,KAAAA,EAAAA,MAAAA,YAEArB,EAAA/vB,oBpB0+GUswB,MoBx+GV5f,WpB4+GY,IAAK,GoB5+GjB+B,GAAAvE,EAAAmB,EAAAoS,KAAAvnB,EAAAoV,MAAAA,EAAAA,KAAAA,OAAA3B,KpB4+GqB3N,EAAI,EAAGA,EAAI,GAAIA,IACtByhB,EAAO,GAAIvP,MAAKif,EAAYnxB,EAAG,EAAG,GoB3+GhD5D,EAAAqB,MACArB,KAAAu0B,EACAv0B,MAAAyW,EAAAue,EAAAl3B,KAAAsE,QACAtE,SAAA61B,EAAA/c,YAAAyO,GpB6+GgBhP,SAAUvY,KAAKq0B,WAAW9M,IAG9BrlB,GAAMqB,MAAQ2zB,EAAM,GAAGljB,MAAQ,IAAMkjB,EAAMA,EAAMvxB,OAAS,GAAGqO,MoB3+GzEqgB,EAAAA,YAAA7d,EACAtU,EAAA60B,KAAAA,EAAAG,EAAA1gB,KAAA4R,OACApoB,KAAAo0B,OAAA2C,GAEAnC,WAAA,SAAA1vB,GACA,MAAA2wB,GAAApd,OAAAjC,EAAA4R,gBAAAyN,EAAApd,MAAA2P,epB8+GUiM,WAAY,SAAS7d,GoB3+G/B,GAAA2gB,IAAAA,GAAAtB,MAAApd,EAAA2P,cAAAA,EAAAA,EAAAA,EACA,OAAAlP,GAAAlB,EAAA6d,SAAApd,EAAAA,UAAAA,EAAAA,SpB8+GUmc,UoBv+GV50B,SAAAq0B,GpBw+GY,GAAKwB,EAAOpd,MAAZ,CoBn+GZwa,GAAAA,GAAAV,EAAA6E,MAAAzP,cACAtS,EAAAA,GAAAA,MAAAA,EAAAA,MpBu+GgC,MAAhBnQ,EAAIuM,QAAgByH,EAAQme,QAAQF,EAAa,GAA6B,KAAhBjyB,EAAIuM,QAAgByH,EAAQme,QAAQF,EAAa,GAA6B,KAAhBjyB,EAAIuM,QAAgByH,EAAQme,QAAQF,EAAa,GAA6B,KAAhBjyB,EAAIuM,SAAgByH,EAAQme,QAAQF,EAAa,GAC1On3B,KAAKq0B,WAAWnb,IAAU2c,EAAOvlB,OAAO4I,GAAS,MqBtqIlE1Y,QAIAX,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACAC,SAAAuV,QrB2qIE7U,QqBtqIFgB,OAAAA,wBAAA,yBAAAyB,SAAA,SAAA,WrBuqII,GqBtqIJ2I,GAAA5L,KAAAH,UACAR,UAAA,0BACAiuB,YAAA,QACAjqB,YAAA,QACAzB,UAAA,QACA0B,YAAA,uBrBuqIM9B,iBAAiB,EqBpqIvBxB,WAAAkE,EAEA7E,QAAAi4B,KrBqqIMhK,UqBnqINiK,ErBoqIMl0B,UqBjqINpE,ErBkqIM2C,MqBhqIN21B,ErBiqIMj0B,MqB/pIN,ErBiqIItD,MqB7pIJkE,MAAAozB,SAAAA,SAAAA,GrB8pIM,QAASA,GAAa/sB,GqBxpI5B0D,GAAAA,MAEAhP,EAAAuB,QAAAQ,UAAAnB,EAAA0K,EAEArI,OADAkM,GAAA0f,EAAA7uB,GrB2pIM,MqBvpINA,OrBypIKgP,UqBzpIL5O,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GrB0pII,OACE+O,SAAU,MACVlM,OqB3pIN1B,ErB4pIMyB,KqB3pIN,SAAAgK,EAAApL,EAAA5B,EAAA4B,GrB4pIQ,GAAI5B,IqBxpIZiD,MAAAwM,EACAlO,QAAAC,EACA6C,MAAA9C,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACA+N,QAAA3C,UAAApL,EAAAuR,MAAAC,EAAAA,GAAAxR,EAAAiO,KrBypIQ,IqBvpIR7P,GAAAiD,erBwpIQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KAEvFL,QqBrpIRsK,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAjK,GrBspIU,GqBrpIViK,GAAAmE,KAAApO,EAAAuR,OAAAlD,GAAAA,cAAAF,EAAAA,MAAAA,EACA9M,SAAArB,UAAAqK,EAAAA,MrBspIYjM,EAAQ4B,GAAOqB,EAAMyM,MAAM7D,EAAK8D,OqBhpI5CpO,QAAAsK,SAAA,QAAA,WAAA,SAAAjK,GACAqB,EAAAmN,IACAvE,EAAAtK,SAAAkC,EAAAA,SAAAwM,EAAAF,GACAxO,EAAAA,GAAAQ,EAAAkB,YAAAgN,OrBupIYpE,EqBnpIZ0sB,SrBopIUt1B,EAAMmN,OAAOvE,EAAK0sB,QAAS,SAAStoB,EAAUF,GqBhpIxDyoB,QAAAF,SAAAt4B,GAGAI,QAAAyL,OAAA1H,EAAA8L,GAIAuoB,EAAAA,QAAA1rB,IAEA0rB,ErB+oIQ,IAAIA,GAAQF,EAAOt4B,EACnBI,GAAQiG,GAAGwF,EAAK1H,SAAW,QAASq0B,EAAMjyB,QAC1CtD,EAAMsN,IAAI,WAAY,WsB/uI9B9P,GAAA+3B,EAAA1rB,UAIAlM,EAAAG,KACAF,EAAA,YtBkvIEU,QsB7uIFoL,OAAA,wBAAA,yBAAA3I,SAAA,SAAA,WtB8uII,GsB7uIJ5D,GAAAW,KAAAH,UACAytB,UAAA,UACAjqB,YAAA,QACAC,YAAA,QAEAo0B,UAAA,KACAl0B,YAAA,uBACAm0B,WAAAA,EtB6uIMt4B,QAAS,KsB1uIfW,UAAAkE,EAEAb,UAAAu0B,EtB2uIMt0B,MsBzuINu0B,EtB0uIMH,UsBvuINz4B,EtBwuIMuE,MsBtuINq0B,EtBuuIMF,asBpuINltB,EtBsuIIzK,MAAKkE,MsBpuITuG,SAAAjH,WAAAA,SAAAA,EAAAA,GtBquIM,QAASo0B,GAAartB,GsBjuI5B,GAAAjH,MACArE,EAAAy4B,QAAA12B,UAAAnB,EAAA0K,EtBmuIQstB,GsBluIRv0B,EAAArE,GtBmuIQ44B,EsBluIRv0B,OAAAA,cAAAA,EAAAA,YACA+C,EAAAA,OtBmuIUwxB,EsBluIVA,OAAAnzB,KAAAA,EAAAA,KtBouIQ,IAAIpB,GAAOu0B,EAAOv0B,IsBjtI1BpB,OtBktIYjD,GAAQy4B,WsBhuIpBG,EAAAA,KAAAA,WtBkuIYv0B,IsB9tIZ+C,EAAAuxB,WtBguIcC,EAAOnzB,QsB1tIrB,IAAAzF,EAAAy4B,YAIAG,EtB4tIM,MsBxtIN54B,OtB0tIKgP,UsB1tIL5O,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GtB2tII,OACE+O,SAAU,MACVlM,OsB5tIN1B,EtB6tIMyB,KsB5tIN,SAAAgK,EAAApL,EAAA5B,EAAA4B,GtB6tIQ,GAAI5B,IsBztIZiD,MAAAwM,EACAlO,QAAAC,EACA6C,MAAA9C,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GACA+N,QAAA3C,UAAApL,EAAAuR,MAAAC,EAAAA,GAAAxR,EAAAiO,KtB0tIQ,IsBxtIR7P,GAAAiD,etBytIQ1B,SAAQC,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASI,GACvEL,QAAQyL,UAAUnB,EAAKjK,KAAS6N,EAAiB/E,KAAKmB,EAAKjK,MAAO5B,EAAQ4B,IAAO,KAEvFL,QsBrtIR+C,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA1C,GtBstIU,GAAI+N,GAAQ,KAAO/N,EAAIuR,OAAO,GAAGC,cAAgBxR,EAAIiO,MAAM,EsBltIrEtO,SAAAC,UAAAqK,EAAA8D,MACA3P,EAAA4B,GAAAqB,EAAAyM,MAAA7D,EAAA8D,OtBstIa1M,EAAM6M,eAAe,WACxB7M,EAAMqB,MAAQ,IsB/sIxB/C,QAAAsK,SAAA,QAAA,UAAA,QAAA,SAAAjK,GACAqB,EAAAmN,IACAvE,EAAAtK,SAAAkC,EAAAA,SAAAwM,EAAAF,GACAxO,EAAAA,GAAAQ,EAAAkB,YAAAgN,OtBqtIYpE,EsBjtIZgtB,StBktIU51B,EAAMmN,OAAOvE,EAAKgtB,QAAS,SAAS5oB,EAAUF,GsB9sIxD+oB,QAAAF,SAAA54B,GAGAI,QAAAyL,OAAA1H,EAAA8L,GAIA6oB,EAAAA,QAAAhsB,IAEAgsB,EtB6sIQ,IAAIA,GAAQF,EAAO54B,EACnBI,GAAQiG,GAAGwF,EAAK1H,SAAW,QAAS20B,EAAMvyB,QAC1CtD,EAAMsN,IAAI,WAAY,WuB30I9B9P,GAAAq4B,EAAAhsB,UAIAlM,EAAAG,KACAmR,EAAA,YvB80IE3Q,QuBv0IFw3B,OAAAA,wBAAA9nB,oCAAAxI,oCAAAA,SAAAA,SAAAA,WvBw0II,GuBv0IJ7H,GAAAghB,KAAArgB,UAEA2Q,UAAA8mB,OvBu0IMC,cuBr0INC,EvBs0IMC,UuBn0INn5B,EvBq0IIe,MuBj0IJkE,MAAAm0B,UAAA,WAAA,aAAA,SAAAnoB,EAAA4Q,EAAA1Z,GvBo0IM,QuBj0INkxB,GAAAA,EAAA/tB,GvBy7IQ,QuBrxIRguB,GAAAC,EAAAvwB,EAAAf,GvBsxIU,GuBrxIVU,GAAA6wB,IvBsxIcC,EAAeC,GuBpxI7B,OAAA/wB,IAAAuJ,EvBsxImB,MuBnxInBsnB,OAAAA,EACArf,EAAAof,GAAAtoB,EAAAA,IAAA0oB,SAAAxf,SvBqxIsC,OAAjByf,GAAyB5wB,EAASf,IAAM4xB,EAAgBC,GAAmBL,EAAeG,EuBlxI/GF,SvBqxIiB,SuBhxIjB,QAAAR,KvBmxIU,MAAO/e,GAAS,KAAOlJ,EAAUA,EAAQ0oB,YAAcxf,EAAS,GAAGxR,UAErE,QAAS+wB,KuB3wIjB1qB,MAAAmL,GAAA,KAAAlJ,EAAAA,EAAAxI,SAAAG,KAAA6wB,aAAAxoB,EAAA7J,GAAAA,aA5LA,GAAA8K,MACA0nB,EAAAA,QAAA73B,UAAAnB,EAAA0K,GACAyuB,EAAA/5B,EAAA+D,OACAi2B,EAAA,+BAEA7sB,GAAA/M,EAEAJ,EAAAwmB,EACA6S,EAAA7S,EACAtU,EAAArL,EvBg0IY+yB,EuB/zIZzsB,EvBg0IY4sB,EAAU,KACVC,EuB/zIZ,KACA7sB,EAAA5L,EAAAnB,QvBg0IQ,IAAIJ,EAAQwmB,aACV,GAAIxmB,EAAQwmB,aAAanW,MAAM,SuB7zIzC6oB,IAAAxsB,GAAAA,GAAA,EAAA7F,EAAA,EAAA7G,EAAAwmB,aAAA,EAAA3f,IAEA9F,EAAAk5B,EAAAA,aAKA9f,GAAA9T,QAAAjG,QAAA6iB,EAAAA,aAwKA/P,OvBspIQgmB,GuBxzIRjW,KAAAA,WACAliB,KAAAgiB,gBvByzIUsW,EAAmBlxB,EAAWC,OAAOhI,EAAQ,IAAI6H,IAAM6xB,EuBrzIjEZ,EAAApsB,EAAAqsB,WAAA/4B,EAAA,GAAA6mB,MAAAlf,MAGAoS,EAAAvT,GAAAA,SAAA7F,KAAAA,eACAoZ,EAAAvT,GAAAA,QAAA7F,KAAAA,4BACA6gB,EAAAhb,GAAAA,SAAA7F,KAAAA,oBvBqzIUA,KAAKkiB,gBuBjzIfiW,KAAAnW,8BvBozIQmW,EAAOpsB,QAAU,WuB5yIzBosB,EAAAjW,IAAAA,SAAAliB,KAAAkiB,eAGA9I,EAAAxR,IAAAA,QAAA6wB,KAAAA,4BACA5X,EAAA5Y,IAAAA,SAAAb,KAAAC,qBvB6yIQ8wB,EuBzyIRgB,2BAAAF,WAGA5W,WAAA2W,EAAAG,cAAA,IvByyIQhB,EuBtyIRgB,cAAA,WvBuyIU,GuBtyIVF,GAAAR,IACAxwB,EAAAmwB,EAAA/wB,OAAAhI,EAAA,IACAA,EAAA+H,EAAAH,OAAA5H,EAAA,IvBuyIc85B,EAAQZ,EAAsBU,EAAOhxB,EAAU6wB,EuBryI7DE,KAAAd,IvBuyIUc,EuBtyIV35B,EACAqJ,QAAArJ,GvBuyIY45B,EAAQ,KACJb,GuBryIhB/4B,EAAAJ,IAAAm6B,QAAAA,IvBwyIgBn6B,EuBtyIhBi5B,eAGAe,EAAAhxB,IAAAA,WAAAL,EAAAA,aAAAA,GAAAA,YvBqyIcvI,EAAQqJ,IAAI,MAAO,MuBlyIjC,WAAArJ,GAEA45B,EvBmyIgBh6B,EAAQm6B,cuBnyIxB,EAAAlB,EAAAA,aAEAxvB,EAAAxB,IAAAjI,EvBsyIgBm5B,GuBnyIhBa,EAAAvwB,IAAA,QAAA,IAEArJ,EAAAqJ,evBqyIcrJ,EAAQqJ,IAAI,WAAYzJ,EAAQwmB,aAAe,GAAK,YuBnyIlEpmB,EAAAJ,IAAAi5B,MAAAA,EAAAzS,aAAA,GAAAuS,EAAA/wB,SAAA4xB,EAAAC,EAAAR,EAAA,SvBuyIYW,EAAQ,KACJb,GuBjyIhB/4B,EAAAuO,IAAAA,QAAAyqB,EAAA5rB,GAAAxD,YAAAkwB,MAIAE,EAAAA,eACAlB,EAAAe,IAAAA,WAAAA,SACAf,EAAAjW,IAAAA,MAAAA,EAAAA,QAIAiW,EAAAe,YAAAA,GAAAzsB,SAAA,SAAA,WAAA0sB,EAAA,IAAAA,EAAA,OvBiyIQhB,EuB/xIRmB,UAAAj6B,WAEA84B,EAAAl5B,gBvB+xIUk5B,EuB9xIV94B,iBvBgyIQ84B,EAAOoB,mBAAqBzY,EAASqX,EAAOkB,UAAW,IACvDlB,EuB7xIRl5B,cAAAkS,WvB8xIU,GuB7xIVqoB,GAAAroB,EAAA,GAAA+U,MAAAje,SACAhJ,EAAAkS,EAAA,GAAA+U,MAAAhf,GvB8xIcjI,GAAQi5B,euB5xItB74B,EAAAJ,IAAAkS,WAAA7B,EAAAmW,aAAA,GAAA,YvB8xIYpmB,EuB7xIZ05B,IAAAA,MAAAA,KvB+xIc95B,EuB7xIdkS,YACA,SvB6xIgBlS,EuB7xIhBkS,YvB8xIclS,EuB7xIdkS,UAAA/J,MvB+xIgBnI,EuB7xIhBkS,UAAA7B,MAAA,cACA6B,EAAA,GAAAlS,EAAAkS,UvB+xIgBA,EADElS,EAAQwmB,aACEre,EAAWC,OAAO+E,EAAO,IAAIlF,IAA0B,EAApBjI,EAAQkS,UuB1xIvEsU,EAAAA,OAAAxmB,EAAA45B,IAAAA,IAAAvpB,EAAA5G,IAAArJ,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAAkS,WAIA0nB,EAAAA,EAAAA,EAAA55B,WAKAA,EAAAi5B,eAEA74B,EADAA,EAAAomB,cAAA+T,EAAAA,aAAAA,MAAAA,aACAb,KAAAW,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,aAAAA,EvB2xIoD,EAAvBr6B,EAAQ45B,cuBnxIrCH,EAAAA,eAEAr5B,EAAAuI,IAAAA,WAAAuJ,GACA9R,EAAAqJ,IAAA,MAAA4wB,KA+BAlrB,EAAAA,OACA+pB,EvB8nIM,GuBj0INH,GAAAx3B,QAAAnB,QAAA6Q,EAAAxI,UACAmZ,EAAAkY,QAAAA,QAAA7oB,EvB+8IM,OuB1wINjR,OvB4wIKgP,UuB5wILjL,WAAAy2B,SAAAA,UAAA9yB,WAAAnG,SAAAnB,EAAA6Q,EAAAA,GvB6wII,OACE9B,SuB7wIN3N,MvB8wIM0R,QuB7wIN3R,kBvB8wIMyB,KuB7wIN,SAAApB,EAAAA,EAAAA,EAAAA,GvB8wIQ,GuB7wIR5B,IvB8wIUiD,MuB7wIVA,EvB8wIUc,OuB7wIV/D,EAAAy6B,EAAAA,SAAAA,QAAAA,QAAAA,GvB+wIQl5B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,eAAgB,YAAc,SAASI,GuB3wI7H,GAAAs4B,QAAAA,UAAAA,EAAAA,IAAAA,CACA9yB,GAAAA,GAAAyE,EAAAjK,EAAAs4B,SAAAhB,KAAA94B,KAAAJ,GAAAA,GvB8wIgB,SAAS0K,KAAK+vB,KAASA,GAAS,GuB7wIhDx3B,EAAArB,GAAA64B,IvBixIQ,IuB9wIRP,EvB+wIQ9yB,GAAS,WACP8yB,EAAQhB,EAAO94B,EAASJ,KuBxwIlCgP,EAAAA,IAAA,WAAA,WACAkrB,GAAAA,EAAAptB,UACA7L,EAAA,KACAF,EAAA2G,YCzPAnG,UAAA,gBAAA,WxBwrMGqlB,OA/qDG3lB,YAAc,WAAY,SAASyG,GACjC3G,KAAK2G,SAAWA,OAItBnG,QAAQd,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpammB,OAAQne","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          if (options.minTime <= options.maxTime) {\n            return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n          } else {\n            return selectedTime < options.minTime * 1 && selectedTime > options.maxTime * 1;\n          }\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          if (options.minTime <= options.maxTime) {\n            var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n            var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          } else {\n            var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.minTime;\n            var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.maxTime;\n          }\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        controller.$viewChangeListeners.push(function () {\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          controller.$render();\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          select.$updateActiveIndex();\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\n          // Only do this if the backdrop option is set.\n          if (options.backdrop) {\n            bodyElement.attr('aria-hidden', 'true');\n          }\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n          modalElement[0].focus();\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            if (options.backdrop) {\n              bodyElement.attr('aria-hidden', 'false');\n            }\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var documentEl = angular.element($window.document);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((documentEl.height() - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\n          // Only do this if the backdrop option is set.\n          if (options.backdrop) {\n            bodyElement.attr('aria-hidden', 'true');\n          }\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n          modalElement[0].focus();\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            if (options.backdrop) {\n              bodyElement.attr('aria-hidden', 'false');\n            }\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          if (options.minTime <= options.maxTime) {\n            return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n          } else {\n            return selectedTime < options.minTime * 1 && selectedTime > options.maxTime * 1;\n          }\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          if (options.minTime <= options.maxTime) {\n            var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n            var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          } else {\n            var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.minTime;\n            var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.maxTime;\n          }\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        controller.$viewChangeListeners.push(function () {\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          controller.$render();\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          select.$updateActiveIndex();\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var documentEl = angular.element($window.document);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((documentEl.height() - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"]}